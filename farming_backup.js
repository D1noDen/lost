const fs = require('fs');
const path = require('path');
const filePath = path.join(__dirname, 'accounts.json');
const SteamTotp = require('steam-totp');
const TradeManager = require('./trade_manager.js');

let accounts = [];
let tradeManager = null;

function loadAccounts() {
  if (fs.existsSync(filePath)) {
    const raw = fs.readFileSync(filePath);
    try {
      const loaded = JSON.parse(raw).accounts || [];
      accounts = loaded.map(acc => {
        // –î–æ–¥–∞—î–º–æ ID –¥–ª—è —ñ—Å–Ω—É—é—á–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤, —è–∫—â–æ –≤–æ–Ω–∏ –π–æ–≥–æ –Ω–µ –º–∞—é—Ç—å
        if (!acc.id) {
          acc.id = 'acc_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
        }
        return {
          ...acc,
          open: acc.open || false,
          lastDrop: acc.lastDrop || '',
          lastDropPrice: acc.lastDropPrice || 0,
          lastDropImageUrl: acc.lastDropImageUrl || ''
        };
      });
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –∑ ID
      saveAccounts();
    } catch {
      accounts = [];
    }
  }
  render();
}

function updateField(index, key, value) {
  if (["income", "expenses", "weeklyIncome", "lastDropPrice"].includes(key)) {
    accounts[index][key] = parseFloat(value) || 0;
  } else {
    accounts[index][key] = value;
  }
  saveAccounts();
  render();
}

function addWeeklyIncome(index) {
  const acc = accounts[index];
  const weekly = parseFloat(acc.weeklyIncome) || 0;
  if (weekly <= 0) return;

  acc.income = (parseFloat(acc.income) || 0) + weekly;
  acc.weeklyIncome = 0;

  const date = new Date().toLocaleDateString();
  acc.history = acc.history || [];
  acc.history.unshift({ date, amount: weekly });

  saveAccounts();
  render();
}

function deleteAccount(index) {
  if (confirm('–í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç?')) {
    accounts.splice(index, 1);
    saveAccounts();
    render();
  }
}

function addAccount() {
  const accountId = 'acc_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
  accounts.push({
    id: accountId,
    login: '',
    password: '',
    name: '',
    income: 0,
    weeklyIncome: 0,
    expenses: 0,
    starred: false,
    history: [],
    prime: false,
    unlockDate: new Date().toISOString().split('T')[0],
    maFilePath: '',
    lastDrop: '',
    lastDropPrice: 0,
    lastDropImageUrl: '',
    open: false,
    farming: true
  });
  saveAccounts();
  render();
}

function daysUntil(dateString) {
  const today = new Date();
  const target = new Date(dateString);
  const diffTime = target - today;
  return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
}

function updateUnlockDate(index, newDate) {
  accounts[index].unlockDate = newDate;
  saveAccounts();
  render();
}

function togglePrime(index) {
  accounts[index].prime = !accounts[index].prime;
  saveAccounts();
  render();
}

function selectMaFile(event, index) {
  console.log(event)
  const file = event.target.files[0];
  if (file) {
    updateField(index, 'maFilePath', `./resources/app/maFiles/${file.name}`);
  } else {
    alert('–ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ Electron.');
  }
}

function togglePasswordVisibility(id) {
  const input = document.getElementById(id);
  input.type = input.type === 'password' ? 'text' : 'password';
}

function toggleStar(index) {
  accounts[index].starred = !accounts[index].starred;
  const button = document.getElementById(`${index}Button`);

  if (accounts[index].starred) {
    button.classList.remove('unFarm');
    button.classList.add('farm');
  } else {
    button.classList.remove('farm');
    button.classList.add('unFarm');
  }

  saveAccounts();
  render();
}

function generate2FA(index) {
  const maPath = accounts[index].maFilePath;
  if (!fs.existsSync(maPath)) {
    alert("maFile –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!");
    return;
  }

  try {
    const maData = JSON.parse(fs.readFileSync(maPath));
    const sharedSecret = maData.shared_secret;

    const code = SteamTotp.generateAuthCode(sharedSecret);
    copyToClipboard(code);
    alert("–ö–æ–¥ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ: " + code);
  } catch (e) {
    alert("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ maFile: " + e.message);
  }
}

function copyToClipboard(text) {
  navigator.clipboard.writeText(text);
}

async function fetchLastDrop(index) {
  const acc = accounts[index];
  console.log(`[fetchLastDrop] –ü–æ—á–∞—Ç–æ–∫ –¥–ª—è –∞–∫–∞—É–Ω—Ç—É ${acc.login}, index: ${index}`);
  
  if (!acc.login || !acc.password) {
    alert('–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –ª–æ–≥—ñ–Ω —Ç–∞ –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–∫–∞—É–Ω—Ç—É');
    return;
  }

  // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î maFile –≤ –∑–∞–¥–∞–Ω–æ–º—É —à–ª—è—Ö—É
  let maFilePath = acc.maFilePath;
  if (!maFilePath || !fs.existsSync(maFilePath)) {
    // –Ø–∫—â–æ —à–ª—è—Ö –Ω–µ –≤–∫–∞–∑–∞–Ω–∏–π –∞–±–æ —Ñ–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î, —à—É–∫–∞—î–º–æ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ–π –ø–∞–ø—Ü—ñ
    maFilePath = path.join(__dirname, 'maFiles', `${acc.login}.maFile`);
    if (!fs.existsSync(maFilePath)) {
      alert(`maFile –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∞–∫–∞—É–Ω—Ç—É ${acc.login}.\n–ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ:\n- ${acc.maFilePath}\n- ${maFilePath}`);
      return;
    }
  }

  try {
    console.log(`[fetchLastDrop] –ß–∏—Ç–∞—î–º–æ maFile: ${maFilePath}`);
    const maFile = JSON.parse(fs.readFileSync(maFilePath));
    const identitySecret = maFile.identity_secret;
    const sharedSecret = maFile.shared_secret;

    if (!identitySecret || !sharedSecret) {
      throw new Error('maFile –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Å–µ–∫—Ä–µ—Ç—ñ–≤');
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π instance TradeManager –¥–ª—è —Ü—å–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É
    tradeManager = new TradeManager();
    
    // –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞ –≤—Å—ñ—Ö –º–æ–∂–ª–∏–≤–∏—Ö –∫–Ω–æ–ø–∫–∞—Ö
    const buttons = [
      document.getElementById(`fetch-drop-${index}`),
      document.querySelector(`[onclick="fetchLastDrop(${index})"]`)
    ];
    
    buttons.forEach(button => {
      if (button) {
        button.textContent = '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...';
        button.disabled = true;
      }
    });

    console.log(`[fetchLastDrop] –ù–∞–º–∞–≥–∞—î–º–æ—Å—è —É–≤—ñ–π—Ç–∏ –≤ –∞–∫–∞—É–Ω—Ç ${acc.login}...`);
    await tradeManager.login(acc.login, acc.password, SteamTotp.generateAuthCode(sharedSecret), identitySecret);
    console.log(`[fetchLastDrop] –£–≤—ñ–π—à–ª–∏ –≤ –∞–∫–∞—É–Ω—Ç ${acc.login}`);

    console.log(`[fetchLastDrop] –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥—Ä–æ–ø...`);
    const dropInfo = await tradeManager.getLastDrop(acc.login);
    console.log(`[fetchLastDrop] –†–µ–∑—É–ª—å—Ç–∞—Ç getLastDrop:`, dropInfo);
    
    if (dropInfo) {
      console.log('[fetchLastDrop] –û—Ç—Ä–∏–º–∞–Ω–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥—Ä–æ–ø:', dropInfo);
      
      // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∞–∫–∞—É–Ω—Ç—É
      const oldDropData = {
        lastDrop: acc.lastDrop,
        lastDropImageUrl: acc.lastDropImageUrl,
        lastDropPrice: acc.lastDropPrice
      };
      
      accounts[index].lastDrop = dropInfo.name;
      accounts[index].lastDropImageUrl = dropInfo.imageUrl;
      accounts[index].lastDropPrice = dropInfo.price;
      
      console.log('[fetchLastDrop] –°—Ç–∞—Ä—ñ –¥–∞–Ω—ñ:', oldDropData);
      console.log('[fetchLastDrop] –ù–æ–≤—ñ –¥–∞–Ω—ñ:', {
        lastDrop: accounts[index].lastDrop,
        lastDropImageUrl: accounts[index].lastDropImageUrl,
        lastDropPrice: accounts[index].lastDropPrice
      });
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∞ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä—É—î–º–æ
      console.log('[fetchLastDrop] –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ...');
      saveAccounts();
      console.log('[fetchLastDrop] –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä—É—î–º–æ...');
      render();
      
      alert(`–û—Å—Ç–∞–Ω–Ω—ñ–π –¥—Ä–æ–ø –æ–Ω–æ–≤–ª–µ–Ω–æ!\n–ü—Ä–µ–¥–º–µ—Ç: ${dropInfo.name}\n–¶—ñ–Ω–∞: ${dropInfo.price}`);
    } else {
      console.log('[fetchLastDrop] dropInfo is null –∞–±–æ undefined');
      alert('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥—Ä–æ–ø –∞–±–æ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä –ø–æ—Ä–æ–∂–Ω—ñ–π');
    }

    tradeManager.disconnect();
    
  } catch (e) {
    console.error(`[fetchLastDrop] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥—Ä–æ–ø—É –¥–ª—è ${acc.login}:`, e);
    alert(`–ü–æ–º–∏–ª–∫–∞: ${e.message}`);
  } finally {
    // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫–∏
    const buttons = [
      document.getElementById(`fetch-drop-${index}`),
      document.querySelector(`[onclick="fetchLastDrop(${index})"]`)
    ];
    
    buttons.forEach(button => {
      if (button) {
        if (button.textContent.includes('üîÑ')) {
          button.textContent = 'üîÑ';
        } else {
          button.textContent = 'üéÅ';
        }
        button.disabled = false;
      }
    });
    console.log(`[fetchLastDrop] –ó–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –∞–∫–∞—É–Ω—Ç—É ${acc.login}`);
  }
}

function render() {
  const container = document.getElementById('accountsFarm');
  container.innerHTML = '';
 
  const filteredAccounts = accounts.filter(item => item.farming);

  filteredAccounts.forEach((acc, i) => {
    // –ó–Ω–∞–π–¥–µ–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å —Ü—å–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–∞—Å–∏–≤—ñ
    const originalIndex = accounts.indexOf(acc);
    
    const passwordId = `password-${originalIndex}`;
    const netProfit = (parseFloat(acc.income || 0) - parseFloat(acc.expenses || 0)).toFixed(2);

    const div = document.createElement('div');
    div.className = 'account';
    const isOpen = acc.open;

   div.innerHTML = `
  <div class="account-card">
    <div class="account-header" onclick="toggleDetails(${originalIndex})">
      <div class="account-title">
        <b>#${i + 1}</b>
        <span>${acc.name || acc.login || '–ë–µ–∑ —ñ–º–µ–Ω—ñ'}</span>
        <small class="account-id">ID: ${acc.id || '–ù–µ–≤—ñ–¥–æ–º–æ'}</small>
      </div>

      <!-- –ó–∞–≤–∂–¥–∏ –ø–æ–∫–∞–∑—É—î–º–æ —Å–µ–∫—Ü—ñ—é –¥—Ä–æ–ø—É -->
      <div class="drop-preview ${acc.lastDrop ? 'has-drop' : 'no-drop-yet'}">
        ${acc.lastDrop ? `
          <img src="${acc.lastDropImageUrl || 'https://via.placeholder.com/48x48/333/fff?text=?'}" alt="${acc.lastDrop}" class="drop-preview-image" onerror="this.src='https://via.placeholder.com/48x48/333/fff?text=?'">
          <div class="drop-preview-info">
            <span class="drop-preview-name">${acc.lastDrop}</span>
            <span class="drop-preview-price">üí∞ ${acc.lastDropPrice}</span>
          </div>
          <button onclick="event.stopPropagation(); fetchLastDrop(${originalIndex})" class="btn-refresh-drop" title="–û–Ω–æ–≤–∏—Ç–∏ –¥—Ä–æ–ø">üîÑ</button>
        ` : `
          <div class="drop-placeholder">
            <img src="https://via.placeholder.com/48x48/333/fff?text=?" class="drop-preview-image">
            <div class="drop-preview-info">
              <span class="drop-preview-name">–ù–µ–º–∞—î –¥—Ä–æ–ø—É</span>
              <span class="drop-preview-price">–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è</span>
            </div>
            <button onclick="event.stopPropagation(); fetchLastDrop(${originalIndex})" class="btn-fetch-drop-mini" title="–û—Ç—Ä–∏–º–∞—Ç–∏ –¥—Ä–æ–ø">üéÅ</button>
          </div>
        `}
      </div>

      <div class="account-meta">
        <span>
          üë§ ${acc.login}
          <button onclick="event.stopPropagation(); copyToClipboard('${acc.login}')">üìã</button>
        </span>

        <span>
          üîí‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢
          <button onclick="event.stopPropagation(); copyToClipboard('${acc.password}')">üìã</button>
        </span>

        <button onclick="event.stopPropagation(); generate2FA(${originalIndex})" class="btn-2fa">üìü –ö–æ–ø—ñ—é–≤–∞—Ç–∏ 2FA</button>

        <button onclick="event.stopPropagation(); toggleFarming(${originalIndex})" class="btn-farming">
          ${acc.farming ? '‚úÖ –§–∞—Ä–º–∏—Ç—å—Å—è' : 'üö´ –ù–µ —Ñ–∞—Ä–º–∏—Ç—å—Å—è'}
        </button>

        <button id="${originalIndex}Button" class="buttonFarm ${acc.starred ? 'farm' : 'unFarm'}" onclick="event.stopPropagation(); toggleStar(${originalIndex})">
          ${acc.starred ? '–í—ñ–¥—Ñ–∞—Ä–º–ª–µ–Ω–∏–π' : '–ù–µ –≤—ñ–¥—Ñ–∞—Ä–º–ª–µ–Ω–∏–π'}
        </button>

        <span class="toggle-arrow">‚ñº</span>
      </div>
    </div>

    <div class="account-details" id="details-${originalIndex}" style="display: ${isOpen ? 'block' : 'none'};">
      <div class="account-body">
        ${acc.prime
          ? `<div class="prime-section">
               <span title="Prime Status">üîí Prime</span>
               <button class="btn-prime-remove" onclick="event.stopPropagation(); togglePrime(${originalIndex})">‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ Prime</button>
             </div>`
          : `<div class="prime-section">
               <span title="–î–æ Prime">
                 –î–æ Prime: —á–µ—Ä–µ–∑ ${daysUntil(acc.unlockDate)} –¥–Ω—ñ–≤
               </span>
               <input type="date" value="${acc.unlockDate || ''}" onchange="updateUnlockDate(${originalIndex}, this.value)" />
               <button class="btn-prime-add" onclick="event.stopPropagation(); togglePrime(${originalIndex})">‚úÖ –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ Prime</button>
             </div>`}

        <input type="file" onchange="selectMaFile(event, ${originalIndex})" />
        <input type="text" placeholder="–®–ª—è—Ö –¥–æ maFile" value="${acc.maFilePath || ''}" onchange="updateField(${originalIndex}, 'maFilePath', this.value)" />

        <input type="text" placeholder="–Ü–º'—è" value="${acc.name || ''}" onchange="updateField(${originalIndex}, 'name', this.value)" />
        <input type="text" placeholder="Login" value="${acc.login}" onchange="updateField(${originalIndex}, 'login', this.value)" />

        <div class="password-field">
          <input type="password" id="${passwordId}" placeholder="Password" value="${acc.password}" onchange="updateField(${originalIndex}, 'password', this.value)" />
          <button onclick="togglePasswordVisibility('${passwordId}')">üëÅÔ∏è</button>
        </div>

        <div class="finance">
          <label>üí∞ –ó–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Ö—ñ–¥:</label>
          <input type="number" value="${acc.income || 0}" onchange="updateField(${originalIndex}, 'income', this.value)" /> –≥—Ä–Ω

          <label>‚ûï –î–æ—Ö—ñ–¥ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å:</label>
          <input type="number" value="${acc.weeklyIncome || 0}" onchange="updateField(${originalIndex}, 'weeklyIncome', this.value)" /> –≥—Ä–Ω
          <button class="btn-weekly-add" onclick="addWeeklyIncome(${originalIndex})">‚ûï –î–æ–¥–∞—Ç–∏</button>

          <label>üí∏ –ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏:</label>
          <input type="number" value="${acc.expenses || 0}" onchange="updateField(${originalIndex}, 'expenses', this.value)" /> –≥—Ä–Ω

          <b>üìà –ß–∏—Å—Ç–∏–π –ø—Ä–∏–±—É—Ç–æ–∫: ${netProfit} –≥—Ä–Ω</b>
        </div>

        <div class="last-drop">
          <label>üéÅ –û—Å—Ç–∞–Ω–Ω—ñ–π –¥—Ä–æ–ø:</label>
          <div class="drop-controls">
            <button id="fetch-drop-${originalIndex}" onclick="fetchLastDrop(${originalIndex})" class="btn-fetch-drop">üéÅ –û—Ç—Ä–∏–º–∞—Ç–∏ –¥—Ä–æ–ø –∑—ñ Steam</button>
          </div>
          <input type="text" placeholder="–ù–∞–∑–≤–∞ –ø—Ä–µ–¥–º–µ—Ç—É" value="${acc.lastDrop || ''}" onchange="updateField(${originalIndex}, 'lastDrop', this.value)" />
          <input type="text" placeholder="URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è" value="${acc.lastDropImageUrl || ''}" onchange="updateField(${originalIndex}, 'lastDropImageUrl', this.value)" />
          <input type="number" placeholder="–¶—ñ–Ω–∞" value="${acc.lastDropPrice || 0}" onchange="updateField(${originalIndex}, 'lastDropPrice', this.value)" /> –≥—Ä–Ω
          
          ${acc.lastDrop ? `
            <div class="last-drop-info">
              <img src="${acc.lastDropImageUrl || 'https://via.placeholder.com/64'}" alt="${acc.lastDrop}" class="last-drop-image" onerror="this.src='https://via.placeholder.com/64'">
              <div class="last-drop-details">
                <span class="last-drop-name">${acc.lastDrop}</span>
                <span class="last-drop-price">–¶—ñ–Ω–∞: ${acc.lastDropPrice} –≥—Ä–Ω</span>
              </div>
            </div>
          ` : '<div class="no-drop">–ù–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –¥—Ä–æ–ø</div>'}
        </div>

        <button class="delete-btn" onclick="deleteAccount(${originalIndex})">üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏</button>
      </div>
    </div>
  </div>
`;

    container.appendChild(div);
  });

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–±—É—Ç–∫—É
  const totalProfit = accounts.reduce((sum, acc) => {
    const inc = parseFloat(acc.income) || 0;
    const exp = parseFloat(acc.expenses) || 0;
    return sum + (inc - exp);
  }, 0);

  const totalProfitEl = document.getElementById('total-profit');
  if (totalProfitEl) {
    totalProfitEl.innerText = `–ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫: ${totalProfit.toFixed(2)} –≥—Ä–Ω`;

    if (totalProfit > 0) {
      totalProfitEl.style.color = '#4caf50'; // –∑–µ–ª–µ–Ω–∏–π
    } else if (totalProfit < 0) {
      totalProfitEl.style.color = '#f44336'; // —á–µ—Ä–≤–æ–Ω–∏–π
    } else {
      totalProfitEl.style.color = '#00ffc3'; // –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π
    }
  }
}

function saveAccounts() {
  try {
    const dataToSave = { accounts };
    fs.writeFileSync(filePath, JSON.stringify(dataToSave, null, 2));
    console.log('[saveAccounts] –ê–∫–∞—É–Ω—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ:', accounts.length, '–∞–∫–∞—É–Ω—Ç—ñ–≤');
    
    // –î–æ–¥–∞—Ç–∫–æ–≤–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—Ä–æ–ø—ñ–≤
    accounts.forEach((acc, i) => {
      if (acc.lastDrop) {
        console.log(`[saveAccounts] –ê–∫–∞—É–Ω—Ç ${i} (${acc.login}): lastDrop="${acc.lastDrop}", price="${acc.lastDropPrice}"`);
      }
    });
  } catch (error) {
    console.error('[saveAccounts] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∞–∫–∞—É–Ω—Ç—ñ–≤:', error);
  }
}

function toggleDetails(index) {
  accounts[index].open = !accounts[index].open;
  saveAccounts();
  render();
}

function toggleFarming(index) {
  accounts[index].farming = !accounts[index].farming;
  saveAccounts();
  render();
}

window.onload = loadAccounts;
