let globalTradeLink = localStorage.getItem('globalTradeLink') || '';
const fs = require('fs');
const path = require('path');
const { ipcRenderer, clipboard } = require('electron');
const SteamTotp = require('steam-totp');
const TradeManager = require('./trade_manager.js');

let accounts = [];
let tradeManager = null;
let filteredAccounts = []; // –î–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤
let searchQuery = ''; // –ü–æ—Ç–æ—á–Ω–∏–π –∑–∞–ø–∏—Ç –ø–æ—à—É–∫—É
let starFilter = 'all'; // –§—ñ–ª—å—Ç—Ä –ø–æ —Å—Ç–∞–Ω—É –≤—ñ–¥—Ñ–∞—Ä–º–ª–µ–Ω–Ω—è: all | starred | unstarred

// –ì–ª–æ–±–∞–ª—å–Ω—ñ —à–ª—è—Ö–∏ (–±—É–¥—É—Ç—å –æ—Ç—Ä–∏–º–∞–Ω—ñ –≤—ñ–¥ main –ø—Ä–æ—Ü–µ—Å—É)
let accountsFilePath = '';
let maFilesPath = '';

// –ö—É—Ä—Å USD –¥–æ UAH (–º–æ–∂–Ω–∞ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏ –∞–±–æ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∑ API)
const USD_TO_UAH_RATE = 41.5;

// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
async function initUpdater() {
  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–µ—Ä—Å—ñ—ó –¥–æ–¥–∞—Ç–∫–∞
  ipcRenderer.invoke('get-app-version').then(version => {
    const versionEl = document.getElementById('app-version');
    if (versionEl) {
      versionEl.textContent = `v${version}`;
    }
  });

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —à–ª—è—Ö—ñ–≤ –≤—ñ–¥ main –ø—Ä–æ—Ü–µ—Å—É
  try {
    accountsFilePath = await ipcRenderer.invoke('get-accounts-file-path');
    maFilesPath = await ipcRenderer.invoke('get-mafiles-path');
    
    console.log('–®–ª—è—Ö–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ:', { accountsFilePath, maFilesPath });
    
    // –ó–∞–±–µ–∑–ø–µ—á—É—î–º–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó maFiles
    await ipcRenderer.invoke('ensure-mafiles-directory');
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —à–ª—è—Ö—ñ–≤:', error);
  }

  // –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞—Ç—É—Å—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
  ipcRenderer.on('update-status', (event, message) => {
    showUpdateNotification(message, 'info');
  });

  // –û–±—Ä–æ–±–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
  ipcRenderer.on('update-progress', (event, progress) => {
    showUpdateProgress(progress);
  });
}

function checkForUpdates() {
  ipcRenderer.invoke('check-for-updates').then(() => {
    showUpdateNotification('–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω—å...', 'info');
  }).catch(error => {
    showUpdateNotification('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω—å: ' + error.message, 'error');
  });
}

function showUpdateNotification(message, type = 'info') {
  // –°—Ç–≤–æ—Ä—é—î–º–æ –∞–±–æ –æ–Ω–æ–≤–ª—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç —Å—Ç–∞—Ç—É—Å—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
  let updateStatus = document.getElementById('update-status');
  if (!updateStatus) {
    updateStatus = document.createElement('div');
    updateStatus.id = 'update-status';
    updateStatus.className = 'update-notification';
    document.body.appendChild(updateStatus);
  }
  
  updateStatus.className = `update-notification ${type}`;
  updateStatus.textContent = message;
  updateStatus.style.display = 'block';
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ö–æ–≤–∞—î–º–æ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
  if (type === 'info' && !message.includes('–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è') && !message.includes('–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ')) {
    setTimeout(() => {
      updateStatus.style.display = 'none';
    }, 10000);
  }
}

function showUpdateProgress(progress) {
  let progressBar = document.getElementById('update-progress');
  if (!progressBar) {
    progressBar = document.createElement('div');
    progressBar.id = 'update-progress';
    progressBar.className = 'update-progress';
    progressBar.innerHTML = `
      <div class="progress-label">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è...</div>
      <div class="progress-bar">
        <div class="progress-fill"></div>
      </div>
      <div class="progress-text">0%</div>
    `;
    document.body.appendChild(progressBar);
  }
  
  const progressFill = progressBar.querySelector('.progress-fill');
  const progressText = progressBar.querySelector('.progress-text');
  
  progressFill.style.width = `${progress.percent}%`;
  progressText.textContent = `${progress.percent}%`;
  progressBar.style.display = 'block';
  
  if (progress.percent >= 100) {
    setTimeout(() => {
      progressBar.style.display = 'none';
    }, 2000);
  }
}

function convertUsdToUah(usdPrice) {
  // –í–∏–¥–∞–ª—è—î–º–æ —Å–∏–º–≤–æ–ª $ —Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ —á–∏—Å–ª–æ
  const cleanPrice = parseFloat(usdPrice.replace('$', ''));
  if (isNaN(cleanPrice)) return 0;
  return (cleanPrice * USD_TO_UAH_RATE).toFixed(2);
}

// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ø–æ–∫–∞–∑—É —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
function showLoadingIndicator(message = '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...') {
  let loadingIndicator = document.getElementById('global-loading-indicator');
  
  if (!loadingIndicator) {
    loadingIndicator = document.createElement('div');
    loadingIndicator.id = 'global-loading-indicator';
    loadingIndicator.className = 'global-loading';
    document.body.appendChild(loadingIndicator);
  }
  
  loadingIndicator.innerHTML = `
    <div class="loading-backdrop">
      <div class="loading-content">
        <div class="loading-spinner">‚è≥</div>
        <div class="loading-text">${message}</div>
      </div>
    </div>
  `;
  
  loadingIndicator.style.display = 'flex';
}

function hideLoadingIndicator() {
  const loadingIndicator = document.getElementById('global-loading-indicator');
  if (loadingIndicator) {
    loadingIndicator.style.display = 'none';
  }
}

function updateLoadingMessage(message) {
  const loadingIndicator = document.getElementById('global-loading-indicator');
  if (loadingIndicator) {
    const textElement = loadingIndicator.querySelector('.loading-text');
    if (textElement) {
      textElement.textContent = message;
    }
  }
}

function loadAccounts() {
  if (!accountsFilePath) {
    console.error('–®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∞–∫–∞—É–Ω—Ç—ñ–≤ —â–µ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π');
    return;
  }
  
  if (fs.existsSync(accountsFilePath)) {
    const raw = fs.readFileSync(accountsFilePath);
    try {
      const loaded = JSON.parse(raw).accounts || [];
      accounts = loaded.map((acc, index) => {
        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ ID —è–∫ –ø–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä (–ø–æ—á–∏–Ω–∞—é—á–∏ –∑ 1)
        acc.id = index + 1;
        return {
          ...acc,
          open: acc.open || false,
          lastDrop: acc.lastDrop || '',
          lastDropPrice: acc.lastDropPrice || 0,
          lastDropImageUrl: acc.lastDropImageUrl || '',
          tradeUrl: acc.tradeUrl || '', // –î–æ–¥–∞—î–º–æ —Ç—Ä–µ–π–¥-–ª—ñ–Ω–∫
          // –î–æ–¥–∞—î–º–æ –ø—ñ–¥—Ç—Ä–∏–º–∫—É –¥–≤–æ—Ö –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –¥—Ä–æ–ø—ñ–≤
          lastDrops: acc.lastDrops || []
        };
      });
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –∑ ID
      saveAccounts();
    } catch {
      accounts = [];
    }
  }
  
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏
  filteredAccounts = [...accounts];
  render();
  renderHistory(); // –†–µ–Ω–¥–µ—Ä–∏–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
}

function updateField(index, key, value) {
  if (["income", "expenses", "weeklyIncome", "lastDropPrice"].includes(key)) {
    accounts[index][key] = parseFloat(value) || 0;
  } else {
    accounts[index][key] = value;
  }
  saveAccounts();
  // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏ –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏
  if (searchQuery && searchQuery !== '') {
    searchAccounts(searchQuery);
  } else {
    filteredAccounts = [...accounts];
    render();
  }
  renderHistory(); // –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ø–æ–ª—ñ–≤
}

function addWeeklyIncome(index) {
  const acc = accounts[index];
  const weekly = parseFloat(acc.weeklyIncome) || 0;
  if (weekly <= 0) return;

  acc.income = (parseFloat(acc.income) || 0) + weekly;
  acc.weeklyIncome = 0;

  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞—Ç—É –≤ ISO —Ñ–æ—Ä–º–∞—Ç—ñ –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
  const date = new Date().toISOString();
  acc.history = acc.history || [];
  acc.history.unshift({ date, amount: weekly });

  saveAccounts();
  
  // –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
  showNotification(`üí∞ –î–æ–¥–∞–Ω–æ ${weekly} –≥—Ä–Ω –¥–æ ${acc.name || acc.login}`, 'success');
  
  // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏ –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏
  if (searchQuery && searchQuery !== '') {
    searchAccounts(searchQuery);
  } else {
    filteredAccounts = [...accounts];
    render();
  }
  
  // –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é
  renderHistory();
}

function deleteAccount(index) {
  if (confirm('–í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç?')) {
    accounts.splice(index, 1);
    
    // –ü–µ—Ä–µ–Ω—É–º–µ—Ä–æ–≤—É—î–º–æ ID –≤—Å—ñ—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    accounts.forEach((acc, i) => {
      acc.id = i + 1;
    });
    
    saveAccounts();
    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏
    if (searchQuery && searchQuery !== '') {
      searchAccounts(searchQuery);
    } else {
      filteredAccounts = [...accounts];
      render();
    }
  }
}

function addAccount() {
  // –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π ID —è–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —ñ—Å–Ω—É—é—á–∏–π ID + 1
  const nextId = accounts.length > 0 ? Math.max(...accounts.map(acc => acc.id || 0)) + 1 : 1;
  
  accounts.push({
    id: nextId,
    login: '',
    password: '',
    name: '',
    income: 0,
    weeklyIncome: 0,
    expenses: 0,
    starred: false,
    history: [],
    prime: false,
    unlockDate: new Date().toISOString().split('T')[0],
    maFilePath: '',
    tradeUrl: '', // –¢—Ä–µ–π–¥-–ª—ñ–Ω–∫–∞
    lastDrop: '',
    lastDropPrice: 0,
    lastDropImageUrl: '',
    lastDrops: [], // –ú–∞—Å–∏–≤ –¥–ª—è –¥–≤–æ—Ö –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –¥—Ä–æ–ø—ñ–≤
    open: false,
    farming: true
  });
  saveAccounts();
  // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏
  if (searchQuery && searchQuery !== '') {
    searchAccounts(searchQuery);
  } else {
    filteredAccounts = [...accounts];
    render();
  }
}

function daysUntil(dateString) {
  const today = new Date();
  const target = new Date(dateString);
  const diffTime = target - today;
  return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
}

function updateUnlockDate(index, newDate) {
  accounts[index].unlockDate = newDate;
  saveAccounts();
  // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏ –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏
  if (searchQuery && searchQuery !== '') {
    searchAccounts(searchQuery);
  } else {
    filteredAccounts = [...accounts];
    render();
  }
}

function togglePrime(index) {
  accounts[index].prime = !accounts[index].prime;
  saveAccounts();
  // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏ –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏
  if (searchQuery && searchQuery !== '') {
    searchAccounts(searchQuery);
  } else {
    filteredAccounts = [...accounts];
    render();
  }
}

function selectMaFile(event, index) {
  console.log('selectMaFile called with event:', event);
  const file = event.target.files[0];
  console.log('Selected file object:', file);
  console.log('File properties:', file ? {
    name: file.name,
    size: file.size,
    type: file.type,
    lastModified: file.lastModified,
    path: file.path, // –¶–µ –º–æ–∂–µ –±—É—Ç–∏ undefined –≤ production
    webkitRelativePath: file.webkitRelativePath
  } : 'No file selected');
  
  if (file && maFilesPath) {
    console.log('Selected file:', file.name, 'Size:', file.size);
    console.log('maFilesPath:', maFilesPath);
    
    // –ö–æ–ø—ñ—é—î–º–æ —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É maFiles –≤ userData
    const fileName = file.name;
    const destinationPath = path.join(maFilesPath, fileName);
    console.log('Destination path will be:', destinationPath);
    
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ FileReader –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É
    const reader = new FileReader();
    
    reader.onload = function(e) {
      try {
        console.log('FileReader —É—Å–ø—ñ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–≤ —Ñ–∞–π–ª, size:', e.target.result.byteLength);
        
        // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Ñ–∞–π–ª—É —è–∫ ArrayBuffer
        const arrayBuffer = e.target.result;
        const buffer = Buffer.from(arrayBuffer);
        
        console.log('Trying to write file to:', destinationPath);
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–∞–π–ª –≤ userData/maFiles
        fs.writeFileSync(destinationPath, buffer);
        
        console.log('File successfully written via fs.writeFileSync');
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —à–ª—è—Ö
        updateField(index, 'maFilePath', destinationPath);
        console.log(`–§–∞–π–ª ${fileName} —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –¥–æ ${destinationPath}`);
        
        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
        showNotification(`‚úÖ –§–∞–π–ª ${fileName} —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ`, 'success');
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤—É—î–º–æ —Ñ–∞–π–ª –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        setTimeout(async () => {
          console.log('[selectMaFile] –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è...');
          await renameMaFilesToAccountNames();
        }, 500);
        
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É —á–µ—Ä–µ–∑ fs:', error);
        console.log('Fallback: trying to copy via IPC...');
        
        // –°–ø—Ä–æ–±—É—î–º–æ —á–µ—Ä–µ–∑ IPC —è–∫ fallback
        copyMaFileViaIPC(arrayBuffer, fileName, index);
      }
    };
    
    reader.onerror = function(error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É:', error);
      alert('–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É: ' + error.message);
    };
    
    // –ß–∏—Ç–∞—î–º–æ —Ñ–∞–π–ª —è–∫ ArrayBuffer
    reader.readAsArrayBuffer(file);
    
  } else if (!file) {
    alert('–§–∞–π–ª –Ω–µ –æ–±—Ä–∞–Ω–æ.');
  } else if (!maFilesPath) {
    alert('–ü–∞–ø–∫–∞ maFiles –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –¥–æ–¥–∞—Ç–æ–∫.');
  }
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —á–µ—Ä–µ–∑ IPC
async function copyMaFileViaIPC(arrayBuffer, fileName, index) {
  try {
    console.log('–°–ø—Ä–æ–±–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ IPC...');
    console.log('arrayBuffer size:', arrayBuffer.byteLength);
    console.log('fileName:', fileName);
    console.log('index:', index);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ ArrayBuffer –≤ –º–∞—Å–∏–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ —á–µ—Ä–µ–∑ IPC
    const uint8Array = new Uint8Array(arrayBuffer);
    const fileData = Array.from(uint8Array);
    
    console.log('Converted to array, length:', fileData.length);
    
    // –ö–æ–ø—ñ—é—î–º–æ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ main –ø—Ä–æ—Ü–µ—Å
    console.log('Invoking IPC copy-mafile...');
    const destinationPath = await ipcRenderer.invoke('copy-mafile', fileData, fileName);
    
    console.log('IPC returned destination path:', destinationPath);
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —à–ª—è—Ö
    updateField(index, 'maFilePath', destinationPath);
    console.log(`IPC: –§–∞–π–ª ${fileName} —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –¥–æ ${destinationPath}`);
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
    showNotification(`‚úÖ –§–∞–π–ª ${fileName} —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —á–µ—Ä–µ–∑ IPC`, 'success');
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤—É—î–º–æ —Ñ–∞–π–ª –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ IPC
    setTimeout(async () => {
      console.log('[copyMaFileViaIPC] –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è...');
      await renameMaFilesToAccountNames();
    }, 500);
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ IPC:', error);
    alert('–ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É: ' + error.message);
  }
}

function togglePasswordVisibility(id) {
  const input = document.getElementById(id);
  input.type = input.type === 'password' ? 'text' : 'password';
}

function toggleStar(index) {
  accounts[index].starred = !accounts[index].starred;
  const button = document.getElementById(`${index}Button`);

  if (accounts[index].starred) {
    button.classList.remove('unFarm');
    button.classList.add('farm');
  } else {
    button.classList.remove('farm');
    button.classList.add('unFarm');
  }

  saveAccounts();
  // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏ –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏
  if (searchQuery && searchQuery !== '') {
    searchAccounts(searchQuery);
  } else {
    filteredAccounts = applyStarFilter([...accounts]);
    render();
    updateSearchResultCount();
  }
}

function generate2FA(index) {
  const maPath = accounts[index].maFilePath;
  if (!fs.existsSync(maPath)) {
    alert("maFile –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!");
    return;
  }

  try {
    const maData = JSON.parse(fs.readFileSync(maPath));
    const sharedSecret = maData.shared_secret;

    const code = SteamTotp.generateAuthCode(sharedSecret);
    copyToClipboard(code, `üîê 2FA –∫–æ–¥ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ: ${code}`);
  } catch (e) {
    alert("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ maFile: " + e.message);
  }
}

function copyToClipboard(text, message = null) {
  try {
    if (clipboard && typeof clipboard.writeText === 'function') {
      clipboard.writeText(String(text));
    } else if (navigator && navigator.clipboard && navigator.clipboard.writeText) {
      navigator.clipboard.writeText(String(text));
    } else {
      console.warn('Clipboard API not available');
    }
  } catch (e) {
    console.error('Clipboard write failed:', e);
  }

  // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  if (message) {
    showNotification(message, 'success');
  } else if (text && text.toString().trim() !== '') {
    showNotification('üìã –°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É', 'success');
  } else {
    showNotification('‚ùå –ù—ñ—á–æ–≥–æ –∫–æ–ø—ñ—é–≤–∞—Ç–∏', 'warning');
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏ –¥—Ä–æ–ø—ñ–≤
function copyTotalDropPrice(index) {
  const acc = accounts[index];
  if (acc.lastDrops && acc.lastDrops.length > 0) {
    const totalPrice = acc.lastDrops.reduce((sum, drop) => sum + parseFloat(drop.priceUAH || 0), 0);
    const formattedTotal = totalPrice.toFixed(2);
    copyToClipboard(formattedTotal, `üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –¥—Ä–æ–ø—ñ–≤ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–∞: ${formattedTotal} –≥—Ä–Ω`);
  } else {
    showNotification('‚ùå –ù–µ–º–∞—î –¥—Ä–æ–ø—ñ–≤ –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è', 'error');
  }
}

// –§—É–Ω–∫—Ü—ñ—è –ø–æ—à—É–∫—É –∞–∫–∞—É–Ω—Ç—ñ–≤
function searchAccounts(query) {
  searchQuery = query.toLowerCase().trim();

  if (!searchQuery) {
    filteredAccounts = [...accounts];
  } else {
    filteredAccounts = accounts.filter(acc => {
      const login = (acc.login || '').toLowerCase();
      const name = (acc.name || '').toLowerCase();
      const lastDrop = (acc.lastDrop || '').toLowerCase();
      const id = (acc.id || '').toString().toLowerCase();
      return login.includes(searchQuery) || name.includes(searchQuery) || lastDrop.includes(searchQuery) || id.includes(searchQuery);
    });
  }

  filteredAccounts = applyStarFilter(filteredAccounts);

  render();
  updateSearchResultCount();
}

// –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –≤ –ø–æ–ª–µ –ø–æ—à—É–∫—É
function handleSearchInput(event) {
  const query = event.target.value;
  searchAccounts(query);
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É
function updateSearchResultCount() {
  const searchInfo = document.getElementById('search-info');
  if (!searchInfo) return;

  const currentList = applyStarFilter((!searchQuery ? accounts : filteredAccounts));
  if (searchQuery || starFilter !== 'all') {
    searchInfo.textContent = `–ó–Ω–∞–π–¥–µ–Ω–æ ${currentList.length} –∑ ${accounts.length} –∞–∫–∞—É–Ω—Ç—ñ–≤`;
    searchInfo.style.display = 'block';
  } else {
    searchInfo.style.display = 'none';
  }
}

// –û—á–∏—â–µ–Ω–Ω—è –ø–æ—à—É–∫—É
function clearSearch() {
  const searchInput = document.getElementById('search-input');
  if (searchInput) {
    searchInput.value = '';
  }
  searchQuery = '';
  filteredAccounts = [...accounts];
  render();
  updateSearchResultCount();
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥—Ä–æ–ø—ñ–≤ –≤ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ
function updateDropLoadingState(index, isLoading) {
  const acc = accounts[index];
  
  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏, —â–æ —Å—Ç–æ—Å—É—é—Ç—å—Å—è —Ü—å–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É
  const accountCard = document.querySelector(`[data-account-index="${index}"]`);
  if (accountCard) {
    if (isLoading) {
      accountCard.classList.add('loading-drop');
    } else {
      accountCard.classList.remove('loading-drop');
    }
  }
  
  // –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –≤ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ
  const buttons = [
    document.getElementById(`fetch-drop-${index}`),
    document.querySelector(`[onclick="fetchLastDrop(${index})"]`),
    document.querySelector(`[onclick*="fetchLastDrop(${index})"]`)
  ];
  
  buttons.forEach(button => {
    if (button) {
      if (isLoading) {
        button.classList.add('loading');
        button.disabled = true;
        if (button.classList.contains('btn-refresh-drop')) {
          button.innerHTML = '<span class="spinner">üîÑ</span>';
        } else if (button.classList.contains('btn-fetch-drop-mini')) {
          button.innerHTML = '<span class="spinner">üîÑ</span>';
        } else {
          button.innerHTML = '<span class="spinner">üîÑ</span> –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...';
        }
      } else {
        button.classList.remove('loading');
        button.disabled = false;
        if (button.classList.contains('btn-refresh-drop')) {
          button.innerHTML = 'üîÑ';
        } else if (button.classList.contains('btn-fetch-drop-mini')) {
          button.innerHTML = 'üéÅ';
        } else {
          button.innerHTML = 'üéÅ –û—Ç—Ä–∏–º–∞—Ç–∏ –¥—Ä–æ–ø–∏ –∑—ñ Steam';
        }
      }
    }
  });
  
  // –î–æ–¥–∞—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Ä—É—á –∑ –¥—Ä–æ–ø–∞–º–∏
  const dropSection = document.querySelector(`.account:nth-child(${index + 1}) .drop-info`);
  if (dropSection) {
    let loadingIndicator = dropSection.querySelector('.drop-loading-indicator');
    
    if (isLoading && !loadingIndicator) {
      loadingIndicator = document.createElement('div');
      loadingIndicator.className = 'drop-loading-indicator';
      loadingIndicator.innerHTML = `
        <div class="loading-drop-spinner">
          <span class="spinner-icon">üîÑ</span>
          <span class="loading-text">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥—Ä–æ–ø—ñ–≤...</span>
        </div>
      `;
      dropSection.appendChild(loadingIndicator);
    } else if (!isLoading && loadingIndicator) {
      loadingIndicator.remove();
    }
  }
}

async function fetchLastDrop(index) {
  const acc = accounts[index];
  console.log(`[fetchLastDrop] –ü–æ—á–∞—Ç–æ–∫ –¥–ª—è –∞–∫–∞—É–Ω—Ç—É ${acc.login}, index: ${index}`);
  
  if (!acc.login || !acc.password) {
    showNotification('–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –ª–æ–≥—ñ–Ω —Ç–∞ –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–∫–∞—É–Ω—Ç—É', 'warning');
    return;
  }

  // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î maFile –≤ –∑–∞–¥–∞–Ω–æ–º—É —à–ª—è—Ö—É
  let maFilePath = acc.maFilePath;
  if (!maFilePath || !fs.existsSync(maFilePath)) {
    // –Ø–∫—â–æ —à–ª—è—Ö –Ω–µ –≤–∫–∞–∑–∞–Ω–∏–π –∞–±–æ —Ñ–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î, —à—É–∫–∞—î–º–æ –≤ –ø–∞–ø—Ü—ñ userData
    if (maFilesPath) {
      maFilePath = path.join(maFilesPath, `${acc.login}.maFile`);
    }
    if (!maFilePath || !fs.existsSync(maFilePath)) {
      showNotification(`maFile –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∞–∫–∞—É–Ω—Ç—É ${acc.login}.<br>–ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ:<br>- ${acc.maFilePath}<br>- ${maFilePath}`, 'error');
      return;
    }
  }

  // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
  accounts[index].loadingDrop = true;
  
  // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
  updateDropLoadingState(index, true);

  try {
    console.log(`[fetchLastDrop] –ß–∏—Ç–∞—î–º–æ maFile: ${maFilePath}`);
    const maFile = JSON.parse(fs.readFileSync(maFilePath));
    const identitySecret = maFile.identity_secret;
    const sharedSecret = maFile.shared_secret;

    if (!identitySecret || !sharedSecret) {
      throw new Error('maFile –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Å–µ–∫—Ä–µ—Ç—ñ–≤');
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π instance TradeManager –¥–ª—è —Ü—å–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É
    tradeManager = new TradeManager();
    
    // –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞ –≤—Å—ñ—Ö –º–æ–∂–ª–∏–≤–∏—Ö –∫–Ω–æ–ø–∫–∞—Ö
    const buttons = [
      document.getElementById(`fetch-drop-${index}`),
      document.querySelector(`[onclick="fetchLastDrop(${index})"]`),
      document.querySelector(`[onclick*="fetchLastDrop(${index})"]`)
    ];
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫
    const originalTexts = [];
    buttons.forEach((button, i) => {
      if (button) {
        originalTexts[i] = button.innerHTML;
        button.innerHTML = '<span class="spinner">üîÑ</span> –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥—Ä–æ–ø—ñ–≤...';
        button.disabled = true;
        button.style.opacity = '0.7';
        button.classList.add('loading');
      }
    });

    // –ü–æ–∫–∞–∑—É—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    showLoadingIndicator(`–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥—Ä–æ–ø—ñ–≤ –¥–ª—è ${acc.login}...`);

    console.log(`[fetchLastDrop] –ù–∞–º–∞–≥–∞—î–º–æ—Å—è —É–≤—ñ–π—Ç–∏ –≤ –∞–∫–∞—É–Ω—Ç ${acc.login}...`);
    updateLoadingMessage(`–í—Ö—ñ–¥ –≤ –∞–∫–∞—É–Ω—Ç ${acc.login}...`);
    await tradeManager.login(acc.login, acc.password, SteamTotp.generateAuthCode(sharedSecret), identitySecret);
    console.log(`[fetchLastDrop] –£–≤—ñ–π—à–ª–∏ –≤ –∞–∫–∞—É–Ω—Ç ${acc.login}`);

    console.log(`[fetchLastDrop] –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥—Ä–æ–ø–∏...`);
    updateLoadingMessage(`–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è ${acc.login}...`);
    const dropsInfo = await tradeManager.getLastDrops(acc.login, 2); // –û—Ç—Ä–∏–º—É—î–º–æ 2 –æ—Å—Ç–∞–Ω–Ω—ñ –¥—Ä–æ–ø–∏
    console.log(`[fetchLastDrop] –†–µ–∑—É–ª—å—Ç–∞—Ç getLastDrops:`, dropsInfo);
    
    updateLoadingMessage(`–û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è ${acc.login}...`);
    
    if (dropsInfo && dropsInfo.length > 0) {
      console.log('[fetchLastDrop] –û—Ç—Ä–∏–º–∞–Ω–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥—Ä–æ–ø–∏:', dropsInfo);
      
      updateLoadingMessage(`–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —Ü—ñ–Ω –¥–ª—è ${acc.login}...`);
      // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ü—ñ–Ω–∏ –≤ –≥—Ä–∏–≤–Ω—ñ —Ç–∞ –æ–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ
      const convertedDrops = dropsInfo.map(drop => ({
        ...drop,
        priceUAH: convertUsdToUah(drop.price),
        originalPrice: drop.price
      }));
      
      // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∞–∫–∞—É–Ω—Ç—É
      accounts[index].lastDrops = convertedDrops;
      
      // –î–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–µ—Ä—à–∏–π –¥—Ä–æ–ø –≤ —Å—Ç–∞—Ä–∏—Ö –ø–æ–ª—è—Ö
      if (convertedDrops.length > 0) {
        accounts[index].lastDrop = convertedDrops[0].name;
        accounts[index].lastDropImageUrl = convertedDrops[0].imageUrl;
        accounts[index].lastDropPrice = convertedDrops[0].priceUAH;
      }
      
      console.log('[fetchLastDrop] –û–Ω–æ–≤–ª–µ–Ω—ñ –¥—Ä–æ–ø–∏:', convertedDrops);
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∞ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä—É—î–º–æ
      console.log('[fetchLastDrop] –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ...');
      updateLoadingMessage(`–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è ${acc.login}...`);
      saveAccounts();
      console.log('[fetchLastDrop] –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä—É—î–º–æ...');
      // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏ –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏
      if (searchQuery && searchQuery !== '') {
        searchAccounts(searchQuery);
      } else {
        filteredAccounts = [...accounts];
        render();
      }
      
      const dropsText = convertedDrops.map((drop, i) => 
        `${i + 1}. ${drop.name} - ${drop.priceUAH} –≥—Ä–Ω (${drop.originalPrice})`
      ).join('<br>');
      
      showNotification(`‚úÖ –î—Ä–æ–ø–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è ${acc.login}!<br><br>${dropsText}`, 'success');
    } else {
      console.log('[fetchLastDrop] dropsInfo is null, undefined –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π');
      showNotification('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥—Ä–æ–ø–∏ –∞–±–æ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä –ø–æ—Ä–æ–∂–Ω—ñ–π', 'warning');
    }

    tradeManager.disconnect();
    
  } catch (e) {
    console.error(`[fetchLastDrop] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥—Ä–æ–ø—É –¥–ª—è ${acc.login}:`, e);
    showNotification(`‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–ª—è ${acc.login}: ${e.message}`, 'error');
  } finally {
    // –ó–Ω—ñ–º–∞—î–º–æ —Å—Ç–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    accounts[index].loadingDrop = false;
    
    // –•–æ–≤–∞—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    hideLoadingIndicator();
    
    // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫–∏
    const buttons = [
      document.getElementById(`fetch-drop-${index}`),
      document.querySelector(`[onclick="fetchLastDrop(${index})"]`),
      document.querySelector(`[onclick*="fetchLastDrop(${index})"]`)
    ];
    
    buttons.forEach((button, i) => {
      if (button) {
        // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç –∞–±–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π
        if (button.id && button.id.includes('fetch-drop')) {
          button.innerHTML = 'üéÅ –û—Ç—Ä–∏–º–∞—Ç–∏ –¥—Ä–æ–ø–∏ –∑—ñ Steam';
        } else if (button.classList.contains('btn-refresh-drop')) {
          button.innerHTML = 'üîÑ';
        } else if (button.classList.contains('btn-fetch-drop-mini')) {
          button.innerHTML = 'üéÅ';
        } else {
          button.innerHTML = 'üéÅ';
        }
        button.disabled = false;
        button.style.opacity = '1';
        button.classList.remove('loading');
      }
    });
    
    // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    updateDropLoadingState(index, false);
    
    console.log(`[fetchLastDrop] –ó–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –∞–∫–∞—É–Ω—Ç—É ${acc.login}`);
  }
}

// –ù–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—é
async function fetchFullInventory(index) {
  const acc = accounts[index];
  console.log(`[fetchFullInventory] –ü–æ—á–∞—Ç–æ–∫ –¥–ª—è –∞–∫–∞—É–Ω—Ç—É ${acc.login}, index: ${index}`);
  
  if (!acc.login || !acc.password) {
    showNotification('–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –ª–æ–≥—ñ–Ω —Ç–∞ –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–∫–∞—É–Ω—Ç—É', 'warning');
    return;
  }

  // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î maFile –≤ –∑–∞–¥–∞–Ω–æ–º—É —à–ª—è—Ö—É
  let maFilePath = acc.maFilePath;
  if (!maFilePath || !fs.existsSync(maFilePath)) {
    // –Ø–∫—â–æ —à–ª—è—Ö –Ω–µ –≤–∫–∞–∑–∞–Ω–∏–π –∞–±–æ —Ñ–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î, —à—É–∫–∞—î–º–æ –≤ –ø–∞–ø—Ü—ñ userData
    if (maFilesPath) {
      maFilePath = path.join(maFilesPath, `${acc.login}.maFile`);
    }
    if (!maFilePath || !fs.existsSync(maFilePath)) {
      showNotification(`maFile –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∞–∫–∞—É–Ω—Ç—É ${acc.login}.<br>–ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ:<br>- ${acc.maFilePath}<br>- ${maFilePath}`, 'error');
      return;
    }
  }

  try {
    console.log(`[fetchFullInventory] –ß–∏—Ç–∞—î–º–æ maFile: ${maFilePath}`);
    const maFile = JSON.parse(fs.readFileSync(maFilePath));
    const identitySecret = maFile.identity_secret;
    const sharedSecret = maFile.shared_secret;

    if (!identitySecret || !sharedSecret) {
      throw new Error('maFile –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Å–µ–∫—Ä–µ—Ç—ñ–≤');
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π instance TradeManager –¥–ª—è —Ü—å–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É
    tradeManager = new TradeManager();
    
    // –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞ –≤—Å—ñ—Ö –º–æ–∂–ª–∏–≤–∏—Ö –∫–Ω–æ–ø–∫–∞—Ö
    const buttons = [
      document.getElementById(`fetch-inventory-${index}`),
      document.querySelector(`[onclick="fetchFullInventory(${index})"]`)
    ];
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫
    const originalTexts = [];
    buttons.forEach((button, i) => {
      if (button) {
        originalTexts[i] = button.textContent;
        button.innerHTML = '<span class="spinner">‚è≥</span> –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—é...';
        button.disabled = true;
        button.style.opacity = '0.7';
      }
    });

    // –ü–æ–∫–∞–∑—É—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    showLoadingIndicator(`–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—é –¥–ª—è ${acc.login}...`);

    console.log(`[fetchFullInventory] –ù–∞–º–∞–≥–∞—î–º–æ—Å—è —É–≤—ñ–π—Ç–∏ –≤ –∞–∫–∞—É–Ω—Ç ${acc.login}...`);
    updateLoadingMessage(`–í—Ö—ñ–¥ –≤ –∞–∫–∞—É–Ω—Ç ${acc.login}...`);
    await tradeManager.login(acc.login, acc.password, SteamTotp.generateAuthCode(sharedSecret), identitySecret);
    console.log(`[fetchFullInventory] –£–≤—ñ–π—à–ª–∏ –≤ –∞–∫–∞—É–Ω—Ç ${acc.login}`);

    console.log(`[fetchFullInventory] –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤–Ω–∏–π —ñ–Ω–≤–µ–Ω—Ç–∞—Ä...`);
    updateLoadingMessage(`–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—é ${acc.login}...`);
    const inventoryInfo = await tradeManager.getFullInventory(acc.login, 50); // –ú–∞–∫—Å–∏–º—É–º 50 –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
    console.log(`[fetchFullInventory] –†–µ–∑—É–ª—å—Ç–∞—Ç getFullInventory:`, inventoryInfo);
    
    if (inventoryInfo && inventoryInfo.length > 0) {
      console.log('[fetchFullInventory] –û—Ç—Ä–∏–º–∞–Ω–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä:', inventoryInfo);
      
      updateLoadingMessage(`–û–±—Ä–æ–±–∫–∞ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—é –¥–ª—è ${acc.login}...`);
      
      // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∞–∫–∞—É–Ω—Ç—É
      accounts[index].fullInventory = inventoryInfo;
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å
      const totalValue = inventoryInfo.reduce((sum, item) => sum + parseFloat(item.priceUAH || 0), 0);
      accounts[index].inventoryValue = totalValue.toFixed(2);
      accounts[index].inventoryCount = inventoryInfo.length;
      
      console.log('[fetchFullInventory] –û–Ω–æ–≤–ª–µ–Ω–∏–π —ñ–Ω–≤–µ–Ω—Ç–∞—Ä:', {
        count: inventoryInfo.length,
        totalValue: totalValue.toFixed(2)
      });
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∞ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä—É—î–º–æ
      console.log('[fetchFullInventory] –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ...');
      saveAccounts();
      console.log('[fetchFullInventory] –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä—É—î–º–æ...');
      // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏ –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏
      if (searchQuery && searchQuery !== '') {
        searchAccounts(searchQuery);
      } else {
        filteredAccounts = [...accounts];
        render();
      }
      
      // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ –∑–∞–≤–∂–¥–∏ –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è
      setTimeout(calculateAndDisplayPortfolio, 500);
      
      const inventoryText = `–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${inventoryInfo.length} –ø—Ä–µ–¥–º–µ—Ç—ñ–≤<br>–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: ${totalValue.toFixed(2)} –≥—Ä–Ω`;
      showNotification(`–Ü–Ω–≤–µ–Ω—Ç–∞—Ä –æ–Ω–æ–≤–ª–µ–Ω–æ!<br><br>${inventoryText}`, 'success');
    } else {
      console.log('[fetchFullInventory] inventoryInfo is null, undefined –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π');
      showNotification('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä –∞–±–æ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä –ø–æ—Ä–æ–∂–Ω—ñ–π', 'warning');
      // –û—á–∏—â–∞—î–º–æ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä –∞–∫–∞—É–Ω—Ç–∞, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –∑ –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ
      acc.fullInventory = [];
      acc.inventoryCount = 0;
      acc.inventoryValue = 0;
      saveAccounts();
      setTimeout(calculateAndDisplayPortfolio, 500);
    }

    tradeManager.disconnect();
    
  } catch (e) {
    console.error(`[fetchFullInventory] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—é –¥–ª—è ${acc.login}:`, e);
    showNotification(`–ü–æ–º–∏–ª–∫–∞: ${e.message}`, 'error');
  } finally {
    // –•–æ–≤–∞—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    hideLoadingIndicator();
    
    // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫–∏
    const buttons = [
      document.getElementById(`fetch-inventory-${index}`),
      document.querySelector(`[onclick="fetchFullInventory(${index})"]`)
    ];
    
    buttons.forEach((button, i) => {
      if (button) {
        // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç –∞–±–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π
        if (button.id && button.id.includes('fetch-inventory')) {
          button.innerHTML = 'üì¶ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–æ–≤–Ω–∏–π —ñ–Ω–≤–µ–Ω—Ç–∞—Ä';
        } else {
          button.innerHTML = 'üì¶';
        }
        button.disabled = false;
        button.style.opacity = '1';
      }
    });
    console.log(`[fetchFullInventory] –ó–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –∞–∫–∞—É–Ω—Ç—É ${acc.login}`);
  }
}

function render() {
  const container = document.getElementById('accounts');
  container.innerHTML = '';

  const accountsToRender = applyStarFilter((!searchQuery ? accounts : filteredAccounts));

  // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
  if (((searchQuery && searchQuery !== '') || starFilter !== 'all') && accountsToRender.length === 0) {
    container.innerHTML = `
      <div class="no-results">
        <div class="no-results-icon">üîç</div>
        <h3>–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</h3>
        <p>–ó–∞ –∑–∞–ø–∏—Ç–æ–º "${searchQuery}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É</p>
        <button onclick="clearSearch()" class="btn-clear-search-inline">–û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ—à—É–∫</button>
      </div>
    `;
    return;
  }

  accountsToRender.forEach((acc, i) => {
    // –ó–Ω–∞–π–¥–µ–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å —Ü—å–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–∞—Å–∏–≤—ñ
    const originalIndex = accounts.indexOf(acc);
    
    const passwordId = `password-${originalIndex}`;
    const netProfit = (parseFloat(acc.income || 0) - parseFloat(acc.expenses || 0)).toFixed(2);

    const div = document.createElement('div');
    div.className = 'account';
    div.setAttribute('data-account-index', originalIndex);
    const isOpen = acc.open;

   div.innerHTML = `
  <div class="account-card ${acc.loadingDrop ? 'loading-drop' : ''}"
    data-account-index="${originalIndex}">
    ${acc.prime ? '<span class="prime-badge" title="Prime"><img style="width:50px; height:50px" src="./Prime.png" /></span>' : ''}
    <div class="account-header" onclick="toggleDetails(${originalIndex})">
      <div class="account-title">
        <b>#${i + 1}</b>
        <span>${acc.name || acc.login || '–ë–µ–∑ —ñ–º–µ–Ω—ñ'}</span>
        <small class="account-id">ID: ${acc.id}</small>
      </div>
      <button class="btn-global-trade" onclick="event.stopPropagation(); openGlobalTradeModal(${originalIndex})">üåê –ü–µ—Ä–µ–∫–∏–Ω—É—Ç–∏ —Å–∫—ñ–Ω–∏ –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—É —Ç—Ä–µ–π–¥-–ª—ñ–Ω–∫—É</button>

      <!-- –ó–∞–≤–∂–¥–∏ –ø–æ–∫–∞–∑—É—î–º–æ —Å–µ–∫—Ü—ñ—é –¥—Ä–æ–ø—É -->
      <div class="drop-preview ${(acc.lastDrops && acc.lastDrops.length > 0) || acc.lastDrop ? 'has-drop' : 'no-drop-yet'}">
        ${(acc.lastDrops && acc.lastDrops.length > 0) ? `
          <div class="drops-container">
            ${acc.lastDrops.slice(0, 2).map((drop, dropIndex) => `
              <div class="drop-item ${dropIndex === 0 ? 'primary-drop' : 'secondary-drop'}">
                <img src="${drop.imageUrl}" alt="${drop.name}" class="drop-preview-image ${dropIndex === 0 ? 'large' : 'small'}" onerror="this.onerror=null; this.outerHTML='<div class=&quot;drop-fallback-svg&quot;><svg width=&quot;40&quot; height=&quot;40&quot; viewBox=&quot;0 0 40 40&quot; fill=&quot;none&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;><rect width=&quot;40&quot; height=&quot;40&quot; rx=&quot;6&quot; fill=&quot;#1f2937&quot; stroke=&quot;#059669&quot; stroke-width=&quot;1&quot; stroke-dasharray=&quot;4,2&quot;/><circle cx=&quot;20&quot; cy=&quot;20&quot; r=&quot;10&quot; stroke=&quot;#10b981&quot; stroke-width=&quot;1&quot; fill=&quot;none&quot; opacity=&quot;0.5&quot;/><path d=&quot;M20 14v12m-6-6h12&quot; stroke=&quot;#059669&quot; stroke-width=&quot;1.5&quot; stroke-linecap=&quot;round&quot;/><circle cx=&quot;20&quot; cy=&quot;20&quot; r=&quot;1.5&quot; fill=&quot;#059669&quot;/></svg></div>'">
                <div class="drop-preview-info">
                  <span class="drop-preview-name">${drop.name}</span>
                  <div class="drop-price-container">
                    <span class="drop-preview-price">üí∞ ${drop.priceUAH} –≥—Ä–Ω</span>
                    <span class="drop-preview-price-usd">(${drop.originalPrice})</span>
                    <button onclick="event.stopPropagation(); copyDropPrice(${originalIndex}, ${dropIndex})" class="btn-copy-drop" title="–ö–æ–ø—ñ—é–≤–∞—Ç–∏ —Ü—ñ–Ω—É">üìã</button>
                  </div>
                </div>
              </div>
            `).join('')}
            ${acc.lastDrops.length > 1 ? `
              <div class="total-drops-price">
                <span class="total-label">–ó–∞–≥–∞–ª–æ–º:</span>
                <span class="total-amount">${(acc.lastDrops.reduce((sum, drop) => sum + parseFloat(drop.priceUAH || 0), 0)).toFixed(2)} –≥—Ä–Ω</span>
                <button onclick="event.stopPropagation(); copyTotalDropPrice(${originalIndex})" class="btn-copy-total" title="–ö–æ–ø—ñ—é–≤–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É">üìã</button>
              </div>
            ` : ''}
          </div>
          <button onclick="event.stopPropagation(); fetchLastDrop(${originalIndex})" class="btn-refresh-drop" title="–û–Ω–æ–≤–∏—Ç–∏ –¥—Ä–æ–ø–∏">üîÑ</button>
        ` : acc.lastDrop ? `
          <img src="${acc.lastDropImageUrl}" alt="${acc.lastDrop}" class="drop-preview-image" onerror="this.onerror=null; this.outerHTML='<div class=&quot;drop-fallback-svg&quot;><svg width=&quot;48&quot; height=&quot;48&quot; viewBox=&quot;0 0 48 48&quot; fill=&quot;none&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;><rect width=&quot;48&quot; height=&quot;48&quot; rx=&quot;8&quot; fill=&quot;#1f2937&quot; stroke=&quot;#059669&quot; stroke-width=&quot;1.5&quot; stroke-dasharray=&quot;6,3&quot;/><circle cx=&quot;24&quot; cy=&quot;24&quot; r=&quot;12&quot; stroke=&quot;#10b981&quot; stroke-width=&quot;1.5&quot; fill=&quot;none&quot; opacity=&quot;0.6&quot;/><path d=&quot;M24 18v12m-6-6h12&quot; stroke=&quot;#059669&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot;/><circle cx=&quot;24&quot; cy=&quot;24&quot; r=&quot;2&quot; fill=&quot;#10b981&quot;/></svg></div>'">
          <div class="drop-preview-info">
            <span class="drop-preview-name">${acc.lastDrop}</span>
            <span class="drop-preview-price">üí∞ ${acc.lastDropPrice} –≥—Ä–Ω</span>
            <button onclick="event.stopPropagation(); copyLastDropPrice(${originalIndex})" class="btn-copy-drop" title="–ö–æ–ø—ñ—é–≤–∞—Ç–∏ —Ü—ñ–Ω—É">üìã</button>
          </div>
          <button onclick="event.stopPropagation(); fetchLastDrop(${originalIndex})" class="btn-refresh-drop" title="–û–Ω–æ–≤–∏—Ç–∏ –¥—Ä–æ–ø">üîÑ</button>
        ` : `
          <div class="drop-placeholder">
            <div class="drop-placeholder-content">
              <svg width="48" height="48" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
                <rect width="48" height="48" rx="8" fill="none" stroke="#059669" stroke-width="2" stroke-dasharray="6,3" opacity="0.6"/>
                <circle cx="24" cy="24" r="12" stroke="#10b981" stroke-width="1.5" fill="none" opacity="0.7"/>
                <path d="M24 18v12m-6-6h12" stroke="#059669" stroke-width="2" stroke-linecap="round"/>
                <circle cx="24" cy="24" r="2" fill="#10b981"/>
                <text x="24" y="40" text-anchor="middle" fill="#059669" font-family="Arial" font-size="6" font-weight="bold">NO DROP</text>
              </svg>
            </div>
            <div class="drop-preview-info">
              <span class="drop-preview-name">–ù–µ–º–∞—î –¥—Ä–æ–ø—ñ–≤</span>
              <span class="drop-preview-price">–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è</span>
            </div>
            <button onclick="event.stopPropagation(); fetchLastDrop(${originalIndex})" class="btn-fetch-drop-mini" title="–û—Ç—Ä–∏–º–∞—Ç–∏ –¥—Ä–æ–ø–∏">üéÅ</button>
          </div>
        `}
      </div>

      <div class="account-meta">
        <span>
          üë§ ${acc.login}
          <button onclick="event.stopPropagation(); copyToClipboard('${acc.login}', 'üë§ –õ–æ–≥—ñ–Ω —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ: ${acc.login}')">üìã</button>
        </span>

        <span>
          üîí‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢
          <button onclick="event.stopPropagation(); copyToClipboard('${acc.password}', 'üîí –ü–∞—Ä–æ–ª—å —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ')">üìã</button>
        </span>

        <button onclick="event.stopPropagation(); generate2FA(${originalIndex})" class="btn-2fa">üìü –ö–æ–ø—ñ—é–≤–∞—Ç–∏ 2FA</button>

        <button onclick="event.stopPropagation(); copyToClipboard('${acc.tradeUrl || ''}', 'üîó –¢—Ä–µ–π–¥-–ª—ñ–Ω–∫–∞ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–∞')" class="btn-trade-url" title="–ö–æ–ø—ñ—é–≤–∞—Ç–∏ —Ç—Ä–µ–π–¥-–ª—ñ–Ω–∫—É">
          üîó ${acc.tradeUrl ? '–¢—Ä–µ–π–¥-–ª—ñ–Ω–∫–∞' : '–ù–µ–º–∞—î —Ç—Ä–µ–π–¥-–ª—ñ–Ω–∫–∏'}
        </button>

        <button onclick="event.stopPropagation(); toggleFarming(${originalIndex})" class="btn-farming">
          ${acc.farming ? '‚úÖ –§–∞—Ä–º–∏—Ç—å—Å—è' : 'üö´ –ù–µ —Ñ–∞—Ä–º–∏—Ç—å—Å—è'}
        </button>

        <button id="${originalIndex}Button" class="buttonFarm ${acc.starred ? 'farm' : 'unFarm'}" onclick="event.stopPropagation(); toggleStar(${originalIndex})">
          ${acc.starred ? '–í—ñ–¥—Ñ–∞—Ä–º–ª–µ–Ω–∏–π' : '–ù–µ –≤—ñ–¥—Ñ–∞—Ä–º–ª–µ–Ω–∏–π'}
        </button>

        <span class="toggle-arrow">‚ñº</span>
      </div>
    </div>

    <div class="account-details" id="details-${originalIndex}" style="display: ${isOpen ? 'block' : 'none'};">
      <div class="account-body">
        ${acc.prime
          ? `<div class="prime-section">
               <span title="Prime Status">üîí Prime</span>
               <button class="btn-prime-remove" onclick="event.stopPropagation(); togglePrime(${originalIndex})">‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ Prime</button>
             </div>`
          : `<div class="prime-section">
               <span title="–î–æ Prime">
                 –î–æ Prime: —á–µ—Ä–µ–∑ ${daysUntil(acc.unlockDate)} –¥–Ω—ñ–≤
               </span>
               <input type="date" value="${acc.unlockDate || ''}" onchange="updateField(${originalIndex}, 'unlockDate', this.value)" />
               <button class="btn-prime-add" onclick="event.stopPropagation(); togglePrime(${originalIndex})">‚úÖ –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ Prime</button>
             </div>`}

        <input type="file" onchange="selectMaFile(event, ${originalIndex})" />
        <input type="text" placeholder="–®–ª—è—Ö –¥–æ maFile" value="${acc.maFilePath || ''}" onchange="updateField(${originalIndex}, 'maFilePath', this.value)" />

        <div class="trade-url-field">
          <input type="text" placeholder="–¢—Ä–µ–π–¥-–ª—ñ–Ω–∫–∞ (Trade URL)" value="${acc.tradeUrl || ''}" onchange="updateField(${originalIndex}, 'tradeUrl', this.value)" />
          <button onclick="event.stopPropagation(); copyToClipboard('${acc.tradeUrl || ''}', 'üîó –¢—Ä–µ–π–¥-–ª—ñ–Ω–∫–∞ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–∞')" title="–ö–æ–ø—ñ—é–≤–∞—Ç–∏ —Ç—Ä–µ–π–¥-–ª—ñ–Ω–∫—É">üîó</button>
        </div>

        <input type="text" placeholder="–Ü–º'—è" value="${acc.name || ''}" onchange="updateField(${originalIndex}, 'name', this.value)" />
        <input type="text" placeholder="Login" value="${acc.login}" onchange="updateField(${originalIndex}, 'login', this.value)" />

        <div class="password-field">
          <input type="password" id="${passwordId}" placeholder="Password" value="${acc.password}" onchange="updateField(${originalIndex}, 'password', this.value)" />
          <button onclick="togglePasswordVisibility('${passwordId}')">üëÅÔ∏è</button>
        </div>

        <div class="finance">
          <label>üí∞ –ó–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Ö—ñ–¥:</label>
          <input type="number" value="${acc.income || 0}" onchange="updateField(${originalIndex}, 'income', this.value)" /> –≥—Ä–Ω

          <label>‚ûï –î–æ—Ö—ñ–¥ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å:</label>
          <input type="number" value="${acc.weeklyIncome || 0}" onchange="updateField(${originalIndex}, 'weeklyIncome', this.value)" /> –≥—Ä–Ω
          <button class="btn-weekly-add" onclick="addWeeklyIncome(${originalIndex})">‚ûï –î–æ–¥–∞—Ç–∏</button>

          <label>üí∏ –ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏:</label>
          <input type="number" value="${acc.expenses || 0}" onchange="updateField(${originalIndex}, 'expenses', this.value)" /> –≥—Ä–Ω

          <b>üìà –ß–∏—Å—Ç–∏–π –ø—Ä–∏–±—É—Ç–æ–∫: ${netProfit} –≥—Ä–Ω</b>
        </div>

        <div class="last-drop">
          <label>üéÅ –û—Å—Ç–∞–Ω–Ω—ñ –¥—Ä–æ–ø–∏:</label>
          <div class="drop-controls">
            <button id="fetch-drop-${originalIndex}" onclick="fetchLastDrop(${originalIndex})" class="btn-fetch-drop">üéÅ –û—Ç—Ä–∏–º–∞—Ç–∏ –¥—Ä–æ–ø–∏ –∑—ñ Steam</button>
          </div>
          
          ${(acc.lastDrops && acc.lastDrops.length > 0) ? `
            <div class="drops-history">
              ${acc.lastDrops.map((drop, dropIndex) => `
                <div class="drop-history-item">
                  <div class="drop-number">#${dropIndex + 1}</div>
                  <img src="${drop.imageUrl}" alt="${drop.name}" class="last-drop-image" onerror="this.onerror=null; this.outerHTML='<div class=&quot;drop-fallback-svg&quot;><svg width=&quot;64&quot; height=&quot;64&quot; viewBox=&quot;0 0 64 64&quot; fill=&quot;none&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;><rect width=&quot;64&quot; height=&quot;64&quot; rx=&quot;10&quot; fill=&quot;#1f2937&quot; stroke=&quot;#059669&quot; stroke-width=&quot;2&quot; stroke-dasharray=&quot;8,4&quot;/><circle cx=&quot;32&quot; cy=&quot;32&quot; r=&quot;16&quot; stroke=&quot;#10b981&quot; stroke-width=&quot;2&quot; fill=&quot;none&quot; opacity=&quot;0.6&quot;/><path d=&quot;M32 20v24m-12-12h24&quot; stroke=&quot;#059669&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot;/><circle cx=&quot;32&quot; cy=&quot;32&quot; r=&quot;3&quot; fill=&quot;#10b981&quot;/></svg></div>'">
                  <div class="last-drop-details">
                    <span class="last-drop-name">${drop.name}</span>
                    <span class="last-drop-price">–¶—ñ–Ω–∞: ${drop.priceUAH} –≥—Ä–Ω (${drop.originalPrice})</span>
                    <span class="last-drop-date">–î–∞—Ç–∞: ${new Date(drop.date).toLocaleDateString()}</span>
                  </div>
                </div>
              `).join('')}
            </div>
          ` : acc.lastDrop ? `
            <div class="legacy-drop-info">
              <input type="text" placeholder="–ù–∞–∑–≤–∞ –ø—Ä–µ–¥–º–µ—Ç—É" value="${acc.lastDrop || ''}" onchange="updateField(${originalIndex}, 'lastDrop', this.value)" />
              <input type="text" placeholder="URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è" value="${acc.lastDropImageUrl || ''}" onchange="updateField(${originalIndex}, 'lastDropImageUrl', this.value)" />
              <input type="number" placeholder="–¶—ñ–Ω–∞" value="${acc.lastDropPrice || 0}" onchange="updateField(${originalIndex}, 'lastDropPrice', this.value)" /> –≥—Ä–Ω
              
              <div class="last-drop-info">
                <img src="${acc.lastDropImageUrl}" alt="${acc.lastDrop}" class="last-drop-image" onerror="this.onerror=null; this.outerHTML='<div class=&quot;drop-fallback-svg&quot;><svg width=&quot;64&quot; height=&quot;64&quot; viewBox=&quot;0 0 64 64&quot; fill=&quot;none&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;><rect width=&quot;64&quot; height=&quot;64&quot; rx=&quot;10&quot; fill=&quot;#1f2937&quot; stroke=&quot;#059669&quot; stroke-width=&quot;2&quot; stroke-dasharray=&quot;8,4&quot;/><circle cx=&quot;32&quot; cy=&quot;32&quot; r=&quot;16&quot; stroke=&quot;#10b981&quot; stroke-width=&quot;2&quot; fill=&quot;none&quot; opacity=&quot;0.6&quot;/><path d=&quot;M32 20v24m-12-12h24&quot; stroke=&quot;#059669&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot;/><circle cx=&quot;32&quot; cy=&quot;32&quot; r=&quot;3&quot; fill=&quot;#10b981&quot;/></svg></div>'">
                <div class="last-drop-details">
                  <span class="last-drop-name">${acc.lastDrop}</span>
                  <span class="last-drop-price">–¶—ñ–Ω–∞: ${acc.lastDropPrice} –≥—Ä–Ω</span>
                </div>
              </div>
            </div>
          ` : '<div class="no-drop">–ù–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –¥—Ä–æ–ø–∏</div>'}
        </div>

        <div class="full-inventory">
          <label>üì¶ –ü–æ–≤–Ω–∏–π —ñ–Ω–≤–µ–Ω—Ç–∞—Ä:</label>
          <div class="inventory-controls">
            <button id="fetch-inventory-${originalIndex}" onclick="fetchFullInventory(${originalIndex})" class="btn-fetch-inventory">üì¶ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–æ–≤–Ω–∏–π —ñ–Ω–≤–µ–Ω—Ç–∞—Ä</button>
            ${acc.fullInventory && acc.fullInventory.length > 0 ? `
              <div class="inventory-summary">
                <span class="inventory-count">–ü—Ä–µ–¥–º–µ—Ç—ñ–≤: ${acc.inventoryCount || acc.fullInventory.length}</span>
                <span class="inventory-value">–í–∞—Ä—Ç—ñ—Å—Ç—å: ${acc.inventoryValue || '0.00'} –≥—Ä–Ω</span>
              </div>
            ` : ''}
          </div>
          
          ${acc.fullInventory && acc.fullInventory.length > 0 ? `
            <div class="inventory-grid">
              ${acc.fullInventory.slice(0, 12).map((item, itemIndex) => `
                <div class="inventory-item" title="${escapeHtml(item.name)}">
                  ${item.imageUrl ? 
                    `<img src="${item.imageUrl}" alt="${escapeHtml(item.name)}" class="inventory-item-image" onerror="this.style.display='none'">` : 
                    '<div class="inventory-item-placeholder">üì¶</div>'
                  }
                  <div class="inventory-item-info">
                    <div class="inventory-item-name">${escapeHtml(item.name.length > 20 ? item.name.substring(0, 20) + '...' : item.name)}</div>
                    <div class="inventory-item-price">${item.priceUAH !== '0.00' ? item.priceUAH + ' –≥—Ä–Ω' : '–ë–µ–∑ —Ü—ñ–Ω–∏'}</div>
                  </div>
                </div>
              `).join('')}
              ${acc.fullInventory.length > 12 ? `
                <div class="inventory-item more-items">
                  <div class="more-items-content">
                    <div class="more-items-count">+${acc.fullInventory.length - 12}</div>
                    <div class="more-items-text">—â–µ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤</div>
                  </div>
                </div>
              ` : ''}
            </div>
          ` : '<div class="no-inventory">–Ü–Ω–≤–µ–Ω—Ç–∞—Ä –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ</div>'}
        </div>

        <button class="delete-btn" onclick="deleteAccount(${originalIndex})">üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏</button>
      </div>
    </div>
  </div>
`;

    container.appendChild(div);
  });

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–±—É—Ç–∫—É
  const totalProfit = accounts.reduce((sum, acc) => {
    const inc = parseFloat(acc.income) || 0;
    const exp = parseFloat(acc.expenses) || 0;
    return sum + (inc - exp);
  }, 0);

  const totalProfitEl = document.getElementById('total-profit');
  if (totalProfitEl) {
    totalProfitEl.innerText = `–ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫: ${totalProfit.toFixed(2)} –≥—Ä–Ω`;

    if (totalProfit > 0) {
      totalProfitEl.style.color = '#4caf50'; // –∑–µ–ª–µ–Ω–∏–π
    } else if (totalProfit < 0) {
      totalProfitEl.style.color = '#f44336'; // —á–µ—Ä–≤–æ–Ω–∏–π
    } else {
      totalProfitEl.style.color = '#00ffc3'; // –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π
    }
  }
}

function saveAccounts() {
  if (!accountsFilePath) {
    console.error('–®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∞–∫–∞—É–Ω—Ç—ñ–≤ —â–µ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π');
    return;
  }
  
  try {
    const dataToSave = { accounts };
    fs.writeFileSync(accountsFilePath, JSON.stringify(dataToSave, null, 2));
    console.log('[saveAccounts] –ê–∫–∞—É–Ω—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ:', accounts.length, '–∞–∫–∞—É–Ω—Ç—ñ–≤');
    console.log('[saveAccounts] –®–ª—è—Ö –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:', accountsFilePath);
    
    // –î–æ–¥–∞—Ç–∫–æ–≤–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—Ä–æ–ø—ñ–≤
    accounts.forEach((acc, i) => {
      if (acc.lastDrop) {
        console.log(`[saveAccounts] –ê–∫–∞—É–Ω—Ç ${i} (${acc.login}): lastDrop="${acc.lastDrop}", price="${acc.lastDropPrice}"`);
      }
    });
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ —è–∫—â–æ –≤–∫–ª–∞–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
    const portfolioTab = document.getElementById('portfolio-tab');
    if (portfolioTab && portfolioTab.style.display === 'block') {
      setTimeout(calculateAndDisplayPortfolio, 100);
    }
  } catch (error) {
    console.error('[saveAccounts] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∞–∫–∞—É–Ω—Ç—ñ–≤:', error);
  }
}

function toggleDetails(index) {
  accounts[index].open = !accounts[index].open;
  saveAccounts();
  // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏ –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏
  if (searchQuery && searchQuery !== '') {
    searchAccounts(searchQuery);
  } else {
    filteredAccounts = [...accounts];
    render();
  }
}

function toggleFarming(index) {
  accounts[index].farming = !accounts[index].farming;
  saveAccounts();
  // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏ –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏
  if (searchQuery && searchQuery !== '') {
    searchAccounts(searchQuery);
  } else {
    filteredAccounts = [...accounts];
    render();
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Ç–∞–±—ñ–≤
function showTab(tabId, buttonElement) {
  // –•–æ–≤–∞—î–º–æ –≤—Å—ñ —Ç–∞–±–∏
  const tabs = document.querySelectorAll('.tab');
  tabs.forEach(tab => {
    tab.style.display = 'none';
  });

  // –í–∏–¥–∞–ª—è—î–º–æ active –∫–ª–∞—Å –∑ —É—Å—ñ—Ö –∫–Ω–æ–ø–æ–∫
  const buttons = document.querySelectorAll('.tab-button');
  buttons.forEach(btn => {
    btn.classList.remove('active');
  });

  // –ü–æ–∫–∞–∑—É—î–º–æ –æ–±—Ä–∞–Ω–∏–π —Ç–∞–±
  const selectedTab = document.getElementById(tabId);
  if (selectedTab) {
    selectedTab.style.display = 'block';
    buttonElement.classList.add('active');
  }

  // –Ø–∫—â–æ —Ü–µ —Ç–∞–± —ñ—Å—Ç–æ—Ä—ñ—ó, —Ä–µ–Ω–¥–µ—Ä–∏–º–æ —ñ—Å—Ç–æ—Ä—ñ—é
  if (tabId === 'history-tab') {
    renderHistory();
  }
  
  // –Ø–∫—â–æ —Ü–µ —Ç–∞–± –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ, –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ
  if (tabId === 'portfolio-tab') {
    setTimeout(showPortfolio, 100); // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ—ó —Ç–∞–±—É
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É —Å–ø–æ–≤—ñ—â–µ–Ω—å
function showNotification(message, type = 'info') {
  // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
  let notificationContainer = document.querySelector('.notification-container');
  if (!notificationContainer) {
    notificationContainer = document.createElement('div');
    notificationContainer.className = 'notification-container';
    document.body.appendChild(notificationContainer);
  }

  // –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
  const notification = document.createElement('div');
  notification.className = `notification notification-${type}`;
  notification.innerHTML = `
    <span class="notification-message">${message}</span>
    <button class="notification-close" onclick="this.parentElement.remove()">√ó</button>
  `;

  // –î–æ–¥–∞—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
  notificationContainer.appendChild(notification);

  // –ê–Ω—ñ–º–∞—Ü—ñ—è –ø–æ—è–≤–∏
  setTimeout(() => notification.classList.add('show'), 100);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª—è—î–º–æ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
  setTimeout(() => {
    notification.classList.remove('show');
    setTimeout(() => notification.remove(), 300);
  }, 5000);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä—É —ñ—Å—Ç–æ—Ä—ñ—ó
function renderHistory() {
  const historyList = document.getElementById('history-list');
  if (!historyList) return;

  historyList.innerHTML = '';

  // –ó–±–∏—Ä–∞—î–º–æ –≤—Å—é —ñ—Å—Ç–æ—Ä—ñ—é –∑ —É—Å—ñ—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤
  const allHistory = [];
  accounts.forEach((acc, accIndex) => {
    if (acc.history && acc.history.length > 0) {
      acc.history.forEach(entry => {
        // –ú—ñ–≥—Ä–∞—Ü—ñ—è —Å—Ç–∞—Ä–∏—Ö –¥–∞—Ç –¥–æ ISO —Ñ–æ—Ä–º–∞—Ç—É
        let entryDate = entry.date;
        if (!entryDate.includes('T') && !entryDate.includes('-')) {
          // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Å—Ç–∞—Ä–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏
          const parts = entryDate.split('.');
          if (parts.length === 3) {
            entryDate = `${parts[2]}-${parts[1].padStart(2, '0')}-${parts[0].padStart(2, '0')}T12:00:00`;
          }
        }
        
        allHistory.push({
          ...entry,
          date: entryDate,
          accountName: acc.name || acc.login || `–ê–∫–∞—É–Ω—Ç #${accIndex + 1}`,
          accountIndex: accIndex
        });
      });
    }
  });

  // –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –¥–∞—Ç–æ—é (–Ω–∞–π–Ω–æ–≤—ñ—à—ñ —Å–ø–æ—á–∞—Ç–∫—É)
  allHistory.sort((a, b) => new Date(b.date) - new Date(a.date));

  if (allHistory.length === 0) {
    historyList.innerHTML = '<div class="no-history">üìä –Ü—Å—Ç–æ—Ä—ñ—è –¥–æ—Ö–æ–¥—ñ–≤ –ø–æ—Ä–æ–∂–Ω—è</div>';
    return;
  }

  // –ì—Ä—É–ø—É—î–º–æ –ø–æ –¥–∞—Ç–∞—Ö
  const groupedHistory = {};
  allHistory.forEach(entry => {
    const date = new Date(entry.date);
    const dateKey = date.toISOString().split('T')[0]; // YYYY-MM-DD
    const displayDate = date.toLocaleDateString('uk-UA', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
    
    if (!groupedHistory[dateKey]) {
      groupedHistory[dateKey] = {
        displayDate,
        entries: []
      };
    }
    groupedHistory[dateKey].entries.push(entry);
  });

  // –†–µ–Ω–¥–µ—Ä–∏–º–æ –≥—Ä—É–ø–∏ –ø–æ –¥–∞—Ç–∞—Ö
  Object.keys(groupedHistory)
    .sort((a, b) => new Date(b) - new Date(a)) // –°–æ—Ä—Ç—É—î–º–æ –¥–∞—Ç–∏ (–Ω–∞–π–Ω–æ–≤—ñ—à—ñ —Å–ø–æ—á–∞—Ç–∫—É)
    .forEach(dateKey => {
      const group = groupedHistory[dateKey];
      
      // –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∞—Ç–∏
      const dateHeader = document.createElement('div');
      dateHeader.className = 'history-date-header';
      dateHeader.innerHTML = `
        <span class="date-icon">üìÖ</span>
        <span class="date-text">${group.displayDate}</span>
        <span class="date-count">(${group.entries.length})</span>
      `;
      historyList.appendChild(dateHeader);

      // –î–æ–¥–∞—î–º–æ –≥—Ä—É–ø—É –∑–∞–ø–∏—Å—ñ–≤
      const dateGroup = document.createElement('div');
      dateGroup.className = 'history-date-group';
      
      // –°–æ—Ä—Ç—É—î–º–æ –∑–∞–ø–∏—Å–∏ –≤ –≥—Ä—É–ø—ñ –∑–∞ —á–∞—Å–æ–º (–Ω–∞–π–Ω–æ–≤—ñ—à—ñ —Å–ø–æ—á–∞—Ç–∫—É)
      group.entries
        .sort((a, b) => new Date(b.date) - new Date(a.date))
        .forEach((entry, index) => {
          const listItem = document.createElement('div');
          listItem.className = 'history-entry';
          
          const amount = parseFloat(entry.amount) || 0;
          const amountClass = amount > 0 ? 'income-entry' : amount < 0 ? 'expense-entry' : 'neutral-entry';
          
          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å (–¥–æ–¥–∞–Ω–æ –º–µ–Ω—à–µ –Ω—ñ–∂ 5 —Ö–≤–∏–ª–∏–Ω —Ç–æ–º—É)
          const entryTime = new Date(entry.date);
          const now = new Date();
          const isNew = (now - entryTime) < 5 * 60 * 1000; // 5 —Ö–≤–∏–ª–∏–Ω
          
          const time = entryTime.toLocaleTimeString('uk-UA', {
            hour: '2-digit',
            minute: '2-digit'
          });
          
          listItem.innerHTML = `
            <div class="history-item ${amountClass}">
              <div class="history-header">
                <span class="history-icon">${amount > 0 ? 'üí∞' : amount < 0 ? 'üí∏' : 'üí±'}</span>
                <span class="history-account">${entry.accountName}</span>
              </div>
              <div class="history-income ${amountClass}">
                ${amount > 0 ? '+' : ''}${amount.toFixed(2)} –≥—Ä–Ω
              </div>
            </div>
          `;
          
          // –î–æ–¥–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –¥–ª—è –Ω–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
          if (isNew) {
            listItem.classList.add('new-entry');
          }
          
          // –ê–Ω—ñ–º–∞—Ü—ñ—è –ø–æ—è–≤–∏ –∑ –∑–∞—Ç—Ä–∏–º–∫–æ—é
          listItem.style.animationDelay = `${index * 0.1}s`;
          
          dateGroup.appendChild(listItem);
        });
      
      historyList.appendChild(dateGroup);
    });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ—Å–µ—Ç—É (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞)
function ResetFarm() {
  if (confirm('–°–∫–∏–Ω—É—Ç–∏ —Å—Ç–∞–Ω —Ñ–∞—Ä–º—É —Ç–∞ –æ—Å—Ç–∞–Ω–Ω—ñ –¥—Ä–æ–ø–∏? –¶—è –¥—ñ—è –Ω–µ–∑–≤–æ—Ä–æ—Ç–Ω–∞!')) {
    accounts.forEach(acc => {
      // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω —Ñ–∞—Ä–º–∏–Ω–≥—É
      acc.farming = false;
      acc.open = false;
      
      // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω "–≤—ñ–¥—Ñ–∞—Ä–º–ª–µ–Ω–∏–π"
      acc.starred = false;
      
      // –°–∫–∏–¥–∞—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥—Ä–æ–ø
      acc.lastDrop = '';
      acc.lastDropPrice = 0;
      acc.lastDropImageUrl = '';
      acc.lastDrops = [];
    });
    saveAccounts();
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏ –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏
    if (searchQuery && searchQuery !== '') {
      searchAccounts(searchQuery);
    } else {
      filteredAccounts = [...accounts];
      render();
    }
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–Ω—É–º–µ—Ä–∞—Ü—ñ—ó ID –∞–∫–∞—É–Ω—Ç—ñ–≤
function renumberAccountIds() {
  accounts.forEach((acc, index) => {
    acc.id = index + 1;
  });
  saveAccounts();
}

window.onload = async () => {
  await initUpdater(); // –°–ø–æ—á–∞—Ç–∫—É —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ updater —Ç–∞ —à–ª—è—Ö–∏
  loadAccounts(); // –ü–æ—Ç—ñ–º –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∞–∫–∞—É–Ω—Ç–∏
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è
async function changePassword() {
  showPasswordChangeModal();
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è
function showPasswordChangeModal() {
  // –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
  const modal = document.createElement('div');
  modal.className = 'password-modal';
  modal.innerHTML = `
    <div class="password-modal-content">
      <div class="password-modal-header">
        <h3>–ó–º—ñ–Ω–∞ –ø–∞—Ä–æ–ª—è</h3>
        <button class="password-modal-close" onclick="closePasswordModal()">&times;</button>
      </div>
      <div class="password-modal-body">
        <div class="password-field">
          <label for="current-password">–ü–æ—Ç–æ—á–Ω–∏–π –ø–∞—Ä–æ–ª—å:</label>
          <input type="password" id="current-password" placeholder="–í–≤–µ–¥—ñ—Ç—å –ø–æ—Ç–æ—á–Ω–∏–π –ø–∞—Ä–æ–ª—å">
        </div>
        <div class="password-field">
          <label for="new-password">–ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å:</label>
          <input type="password" id="new-password" placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å">
        </div>
        <div class="password-field">
          <label for="confirm-password">–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:</label>
          <input type="password" id="confirm-password" placeholder="–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å">
        </div>
        <div class="password-error" id="password-error"></div>
      </div>
      <div class="password-modal-footer">
        <button class="password-btn password-btn-cancel" onclick="closePasswordModal()">–°–∫–∞—Å—É–≤–∞—Ç–∏</button>
        <button class="password-btn password-btn-save" onclick="saveNewPassword()">–ó–±–µ—Ä–µ–≥—Ç–∏</button>
      </div>
    </div>
  `;
  
  document.body.appendChild(modal);
  
  // –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä—à–æ–º—É –ø–æ–ª—ñ
  setTimeout(() => {
    document.getElementById('current-password').focus();
  }, 100);
  
  // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–∫—É Enter –¥–ª—è –ø–æ–ª—ñ–≤ –≤–≤–æ–¥—É
  const inputs = modal.querySelectorAll('input[type="password"]');
  inputs.forEach((input, index) => {
    input.addEventListener('keypress', (event) => {
      if (event.key === 'Enter') {
        event.preventDefault();
        if (index < inputs.length - 1) {
          // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–æ–ª—è
          inputs[index + 1].focus();
        } else {
          // –ù–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–º—É –ø–æ–ª—ñ - –∑–±–µ—Ä—ñ–≥–∞—î–º–æ
          saveNewPassword();
        }
      }
    });
  });
  
  // –ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ –∫–ª—ñ–∫—É –ø–æ–∑–∞ –º–æ–¥–∞–ª—å–Ω–∏–º –≤—ñ–∫–Ω–æ–º
  modal.addEventListener('click', (event) => {
    if (event.target === modal) {
      closePasswordModal();
    }
  });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
window.closePasswordModal = function() {
  const modal = document.querySelector('.password-modal');
  if (modal) {
    modal.remove();
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
window.saveNewPassword = async function() {
  const currentPassword = document.getElementById('current-password').value;
  const newPassword = document.getElementById('new-password').value;
  const confirmPassword = document.getElementById('confirm-password').value;
  const errorDiv = document.getElementById('password-error');
  
  // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–º–∏–ª–∫–∏
  errorDiv.textContent = '';
  
  if (!currentPassword || !newPassword || !confirmPassword) {
    errorDiv.textContent = '–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è!';
    return;
  }
  
  if (newPassword !== confirmPassword) {
    errorDiv.textContent = '–ü–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å!';
    return;
  }
  
  if (newPassword.length < 3) {
    errorDiv.textContent = '–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ 3 —Å–∏–º–≤–æ–ª–∏!';
    return;
  }
  
  try {
    // –ß–∏—Ç–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π auth.json —á–µ—Ä–µ–∑ IPC
    const authData = await ipcRenderer.invoke('read-auth-file');
    
    if (currentPassword !== authData.password) {
      errorDiv.textContent = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–æ—Ç–æ—á–Ω–∏–π –ø–∞—Ä–æ–ª—å!';
      return;
    }
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ IPC
    authData.password = newPassword;
    await ipcRenderer.invoke('write-auth-file', authData);
    
    closePasswordModal();
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
    showNotification('–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –¥–æ–¥–∞—Ç–æ–∫ –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω.', 'success');
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è:', error);
    errorDiv.textContent = '–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è: ' + error.message;
  }
}

// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É/–µ–∫—Å–ø–æ—Ä—Ç—É
async function importAccounts() {
  try {
    showNotification('–í–∏–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª –∑ –∞–∫–∞—É–Ω—Ç–∞–º–∏ –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É...', 'info');
    const result = await ipcRenderer.invoke('import-accounts');
    
    if (result.success) {
      showNotification(result.message, 'success');
      // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∞–∫–∞—É–Ω—Ç—ñ–≤
      setTimeout(() => {
        window.location.reload();
      }, 2000);
    } else {
      showNotification(result.message, 'error');
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É –∞–∫–∞—É–Ω—Ç—ñ–≤:', error);
    showNotification('–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É –∞–∫–∞—É–Ω—Ç—ñ–≤: ' + error.message, 'error');
  }
}

async function importTradeHistory() {
  try {
    showNotification('–í–∏–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é —Ç–æ—Ä–≥—ñ–≤–ª—ñ –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É...', 'info');
    const result = await ipcRenderer.invoke('import-trade-history');
    
    if (result.success) {
      showNotification(result.message, 'success');
    } else {
      showNotification(result.message, 'error');
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É —ñ—Å—Ç–æ—Ä—ñ—ó:', error);
    showNotification('–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É —ñ—Å—Ç–æ—Ä—ñ—ó: ' + error.message, 'error');
  }
}

async function importMaFiles() {
  try {
    showNotification('–í–∏–±–µ—Ä—ñ—Ç—å –ø–∞–ø–∫—É –∑ .maFile —Ñ–∞–π–ª–∞–º–∏ –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É...', 'info');
    const result = await ipcRenderer.invoke('import-mafiles-folder');
    
    if (result.success) {
      showNotification(result.message, 'success');
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤—É—î–º–æ —Ñ–∞–π–ª–∏ –ø—ñ—Å–ª—è —ñ–º–ø–æ—Ä—Ç—É
      setTimeout(async () => {
        await renameMaFilesToAccountNames();
        // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∞–∫–∞—É–Ω—Ç—ñ–≤
        setTimeout(() => {
          window.location.reload();
        }, 1000);
      }, 1000);
    } else {
      showNotification(result.message, 'error');
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É maFiles:', error);
    showNotification('–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É maFiles: ' + error.message, 'error');
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É –ø–∞–ø–∫–∏ –∑ .maFile —Ñ–∞–π–ª–∞–º–∏
async function importMaFilesFolder() {
  try {
    showNotification('–í–∏–±–µ—Ä—ñ—Ç—å –ø–∞–ø–∫—É –∑ .maFile —Ñ–∞–π–ª–∞–º–∏ –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É...', 'info');
    const result = await ipcRenderer.invoke('import-mafiles-folder');
    
    if (result.success) {
      showNotification(result.message, 'success');
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤—É—î–º–æ —Ñ–∞–π–ª–∏ –ø—ñ—Å–ª—è —ñ–º–ø–æ—Ä—Ç—É
      setTimeout(async () => {
        await renameMaFilesToAccountNames();
        // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∞–∫–∞—É–Ω—Ç—ñ–≤
        setTimeout(() => {
          window.location.reload();
        }, 1000);
      }, 1000);
    } else {
      showNotification(result.message, 'error');
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É –ø–∞–ø–∫–∏ maFiles:', error);
    showNotification('–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É –ø–∞–ø–∫–∏ maFiles: ' + error.message, 'error');
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É –æ–∫—Ä–µ–º–∏—Ö .maFile —Ñ–∞–π–ª—ñ–≤
async function importMaFilesIndividual() {
  try {
    showNotification('–í–∏–±–µ—Ä—ñ—Ç—å .maFile —Ñ–∞–π–ª–∏ –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É...', 'info');
    const result = await ipcRenderer.invoke('import-mafiles-individual');
    
    if (result.success) {
      showNotification(result.message, 'success');
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤—É—î–º–æ —Ñ–∞–π–ª–∏ –ø—ñ—Å–ª—è —ñ–º–ø–æ—Ä—Ç—É
      setTimeout(async () => {
        await renameMaFilesToAccountNames();
        // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∞–∫–∞—É–Ω—Ç—ñ–≤
        setTimeout(() => {
          window.location.reload();
        }, 1000);
      }, 1000);
    } else {
      showNotification(result.message, 'error');
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É –æ–∫—Ä–µ–º–∏—Ö maFiles:', error);
    showNotification('–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É –æ–∫—Ä–µ–º–∏—Ö maFiles: ' + error.message, 'error');
  }
}

async function exportAccounts() {
  try {
    showNotification('–í–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ü–µ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É...', 'info');
    const result = await ipcRenderer.invoke('export-accounts');
    
    if (result.success) {
      showNotification(result.message, 'success');
    } else {
      showNotification(result.message, 'error');
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É –∞–∫–∞—É–Ω—Ç—ñ–≤:', error);
    showNotification('–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É –∞–∫–∞—É–Ω—Ç—ñ–≤: ' + error.message, 'error');
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ —ñ–º–ø–æ—Ä—Ç—É/–µ–∫—Å–ø–æ—Ä—Ç—É
function showImportExportModal() {
  const modal = document.createElement('div');
  modal.className = 'import-export-modal';
  modal.innerHTML = `
    <div class="import-export-modal-content">
      <div class="import-export-modal-header">
        <h3>–Ü–º–ø–æ—Ä—Ç / –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö</h3>
        <button class="modal-close" onclick="closeImportExportModal()">&times;</button>
      </div>
      <div class="import-export-modal-body">
        <div class="import-export-section">
          <h4>üì• –Ü–º–ø–æ—Ä—Ç</h4>
          <div class="import-export-buttons">
            <button class="import-export-btn import-btn" onclick="importAccounts()">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"/>
                <circle cx="9" cy="7" r="4"/>
                <path d="M23 21v-2a4 4 0 0 0-3-3.87"/>
                <path d="M16 3.13a4 4 0 0 1 0 7.75"/>
              </svg>
              –Ü–º–ø–æ—Ä—Ç –∞–∫–∞—É–Ω—Ç—ñ–≤
            </button>
            <button class="import-export-btn import-btn" onclick="importTradeHistory()">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M3 3h18v18H3zM12 8v8m-4-4h8"/>
              </svg>
              –Ü–º–ø–æ—Ä—Ç —ñ—Å—Ç–æ—Ä—ñ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ
            </button>
            <button class="import-export-btn import-btn" onclick="importMaFiles()">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"/>
                <polyline points="14,2 14,8 20,8"/>
                <line x1="16" y1="13" x2="8" y2="13"/>
                <line x1="16" y1="17" x2="8" y2="17"/>
                <polyline points="10,9 9,9 8,9"/>
              </svg>
              –Ü–º–ø–æ—Ä—Ç .maFile –ø–∞–ø–∫–∏
            </button>
          </div>
        </div>
        
        <div class="import-export-section">
          <h4>üì§ –ï–∫—Å–ø–æ—Ä—Ç</h4>
          <div class="import-export-buttons">
            <button class="import-export-btn export-btn" onclick="exportAccounts()">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"/>
                <circle cx="9" cy="7" r="4"/>
                <path d="M23 21v-2a4 4 0 0 0-3-3.87"/>
                <path d="M16 3.13a4 4 0 0 1 0 7.75"/>
              </svg>
              –ï–∫—Å–ø–æ—Ä—Ç –∞–∫–∞—É–Ω—Ç—ñ–≤
            </button>
          </div>
        </div>
        
        <div class="import-export-info">
          <h4>‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</h4>
          <ul>
            <li><strong>–Ü–º–ø–æ—Ä—Ç –∞–∫–∞—É–Ω—Ç—ñ–≤:</strong> –î–æ–¥–∞—î –Ω–æ–≤—ñ –∞–∫–∞—É–Ω—Ç–∏ –¥–æ —ñ—Å–Ω—É—é—á–∏—Ö (–¥—É–±–ª—ñ–∫–∞—Ç–∏ –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç—å—Å—è)</li>
            <li><strong>–Ü–º–ø–æ—Ä—Ç —ñ—Å—Ç–æ—Ä—ñ—ó:</strong> –ó–∞–º—ñ–Ω—é—î –ø–æ—Ç–æ—á–Ω—É —ñ—Å—Ç–æ—Ä—ñ—é —Ç–æ—Ä–≥—ñ–≤–ª—ñ</li>
            <li><strong>–Ü–º–ø–æ—Ä—Ç .maFile:</strong> –ö–æ–ø—ñ—é—î .maFile —Ñ–∞–π–ª–∏ –¥–æ –ø–∞–ø–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–∏</li>
            <li><strong>–ï–∫—Å–ø–æ—Ä—Ç –∞–∫–∞—É–Ω—Ç—ñ–≤:</strong> –ó–±–µ—Ä—ñ–≥–∞—î –≤—Å—ñ –∞–∫–∞—É–Ω—Ç–∏ —É JSON —Ñ–∞–π–ª</li>
          </ul>
        </div>
      </div>
      <div class="import-export-modal-footer">
        <button class="import-export-btn cancel-btn" onclick="closeImportExportModal()">–ó–∞–∫—Ä–∏—Ç–∏</button>
      </div>
    </div>
  `;
  
  document.body.appendChild(modal);
  
  // –ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ –∫–ª—ñ–∫—É –ø–æ–∑–∞ –º–æ–¥–∞–ª—å–Ω–∏–º –≤—ñ–∫–Ω–æ–º
  modal.addEventListener('click', (event) => {
    if (event.target === modal) {
      closeImportExportModal();
    }
  });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ —ñ–º–ø–æ—Ä—Ç—É/–µ–∫—Å–ø–æ—Ä—Ç—É
window.closeImportExportModal = function() {
  const modal = document.querySelector('.import-export-modal');
  if (modal) {
    modal.remove();
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—Ä–∏–º—É—Å–æ–≤–æ–≥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –≤—Å—ñ—Ö –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω —Ç–∞ –µ–∫—Ä–∞–Ω—ñ–≤ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
function forceCloseAllModals() {
  const modals = document.querySelectorAll('.password-modal, .import-export-modal, .drop-info-modal, .loading-backdrop');
  modals.forEach(modal => {
    modal.remove();
  });
  showNotification('–í—Å—ñ –º–æ–¥–∞–ª—å–Ω—ñ –≤—ñ–∫–Ω–∞ —Ç–∞ –µ–∫—Ä–∞–Ω–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ.', 'info');
}

// –†–æ–±–∏–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –≥–ª–æ–±–∞–ª—å–Ω–æ—é
window.forceCloseAllModals = forceCloseAllModals;

// –¢–µ—Å—Ç–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è DevTools
window.testRenameFiles = async function() {
  console.log('=== –¢–ï–°–¢: –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ ===');
  console.log('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫–∞—É–Ω—Ç—ñ–≤:', accounts.length);
  console.log('–®–ª—è—Ö –¥–æ maFiles:', maFilesPath);
  
  if (accounts.length > 0) {
    console.log('–ü–µ—Ä—à—ñ 3 –∞–∫–∞—É–Ω—Ç–∏:');
    accounts.slice(0, 3).forEach((acc, i) => {
      console.log(`${i+1}. Login: "${acc.login}", maFilePath: "${acc.maFilePath}"`);
    });
  }
  
  await renameMaFilesToAccountNames();
};

window.debugAccounts = function() {
  console.log('=== –î–ï–ë–ê–ì: –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–∫–∞—É–Ω—Ç–∏ ===');
  console.log('–í—Å—å–æ–≥–æ –∞–∫–∞—É–Ω—Ç—ñ–≤:', accounts.length);
  
  accounts.forEach((acc, i) => {
    console.log(`–ê–∫–∞—É–Ω—Ç ${i+1}:`);
    console.log(`  Login: "${acc.login}"`);
    console.log(`  maFilePath: "${acc.maFilePath}"`);
    console.log(`  –§–∞–π–ª —ñ—Å–Ω—É—î: ${acc.maFilePath ? require('fs').existsSync(acc.maFilePath) : '–Ω–µ–º–∞—î —à–ª—è—Ö—É'}`);
  });
  
  console.log('–®–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏ maFiles:', maFilesPath);
  
  if (maFilesPath && require('fs').existsSync(maFilesPath)) {
    try {
      const files = require('fs').readdirSync(maFilesPath);
      console.log('–§–∞–π–ª–∏ –≤ –ø–∞–ø—Ü—ñ maFiles:', files);
    } catch (e) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –ø–∞–ø–∫–∏:', e);
    }
  } else {
    console.log('–ü–∞–ø–∫–∞ maFiles –Ω–µ —ñ—Å–Ω—É—î –∞–±–æ —à–ª—è—Ö –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π');
  }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö maFiles
async function autoLinkAllMaFiles() {
  try {
    showNotification('–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑\'—è–∑—É—é .maFile —Ñ–∞–π–ª–∏ –∑ –∞–∫–∞—É–Ω—Ç–∞–º–∏...', 'info');
    const result = await ipcRenderer.invoke('auto-link-mafiles');
    
    if (result.success) {
      showNotification(result.message, 'success');
      // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ —á–µ—Ä–µ–∑ –¥–µ—è–∫–∏–π —á–∞—Å
      setTimeout(() => {
        window.location.reload();
      }, 3000);
    } else {
      showNotification(result.message, 'error');
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–≤\'—è–∑—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö maFiles:', error);
    showNotification('–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–≤\'—è–∑—É–≤–∞–Ω–Ω—è: ' + error.message, 'error');
  }
}

// –†–æ–±–∏–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –≥–ª–æ–±–∞–ª—å–Ω–∏–º–∏
window.importAccounts = importAccounts;
window.importTradeHistory = importTradeHistory;
window.importMaFiles = importMaFiles;
window.importMaFilesFolder = importMaFilesFolder;
window.importMaFilesIndividual = importMaFilesIndividual;
window.exportAccounts = exportAccounts;
window.showImportExportModal = showImportExportModal;
window.autoLinkAllMaFiles = autoLinkAllMaFiles;
window.renameMaFilesToAccountNames = renameMaFilesToAccountNames;

function applyStarFilter(list) {
  if (starFilter === 'starred') return list.filter(acc => acc.starred);
  if (starFilter === 'unstarred') return list.filter(acc => !acc.starred);
  return list;
}

function setStarFilter(filter) {
  starFilter = filter;
  ['filter-all','filter-starred','filter-unstarred'].forEach(id => {
    const btn = document.getElementById(id);
    if (btn) btn.classList.remove('active');
  });
  const activeBtn = document.getElementById(`filter-${filter}`);
  if (activeBtn) activeBtn.classList.add('active');

  if (searchQuery) {
    searchAccounts(searchQuery);
  } else {
    filteredAccounts = applyStarFilter([...accounts]);
    render();
    updateSearchResultCount();
  }
}

window.setStarFilter = setStarFilter;

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è .maFile —Ñ–∞–π–ª—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ª–æ–≥—ñ–Ω—É –∞–∫–∞—É–Ω—Ç–∞
async function renameMaFilesToAccountNames() {
  try {
    console.log('[renameMaFiles] –ü–æ—á–∞—Ç–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó');
    showNotification('–ü–µ—Ä–µ–π–º–µ–Ω–æ–≤—É—î–º–æ .maFile —Ñ–∞–π–ª–∏...', 'info');
    
    if (!maFilesPath) {
      console.error('[renameMaFiles] maFilesPath –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π');
      showNotification('–®–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏ maFiles –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π', 'error');
      return;
    }

    console.log('[renameMaFiles] –®–ª—è—Ö –¥–æ maFiles:', maFilesPath);
    console.log('[renameMaFiles] –ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–±–ª—ñ–∫–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤:', accounts.length);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –ø–∞–ø–∫–∞
    if (!fs.existsSync(maFilesPath)) {
      console.error('[renameMaFiles] –ü–∞–ø–∫–∞ –Ω–µ —ñ—Å–Ω—É—î:', maFilesPath);
      showNotification(`–ü–∞–ø–∫–∞ maFiles –Ω–µ —ñ—Å–Ω—É—î: ${maFilesPath}`, 'error');
      return;
    }

    if (accounts.length === 0) {
      console.log('[renameMaFiles] –ù–µ–º–∞—î –æ–±–ª—ñ–∫–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏');
      showNotification('–ù–µ–º–∞—î –æ–±–ª—ñ–∫–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤', 'warning');
      return;
    }
    
    let renamedCount = 0;
    let skippedCount = 0;
    let errors = [];

    // –ü—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ –∫–æ–∂–Ω–æ–º—É –æ–±–ª—ñ–∫–æ–≤–æ–º—É –∑–∞–ø–∏—Å—É
    for (const account of accounts) {
      console.log(`\n[renameMaFiles] === –û–±—Ä–æ–±–ª—è—î–º–æ –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å: ${account.login} ===`);
      
      try {
        if (!account.maFilePath) {
          console.log(`[renameMaFiles] –£ –∞–∫–∞—É–Ω—Ç—É ${account.login} –≤—ñ–¥—Å—É—Ç–Ω—ñ–π maFilePath`);
          continue;
        }

        console.log(`[renameMaFiles] –ü–æ—Ç–æ—á–Ω–∏–π maFilePath: ${account.maFilePath}`);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î —Ñ–∞–π–ª
        if (!fs.existsSync(account.maFilePath)) {
          console.error(`[renameMaFiles] –§–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î: ${account.maFilePath}`);
          errors.push(`–§–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î –¥–ª—è –∞–∫–∞—É–Ω—Ç—É ${account.login}: ${account.maFilePath}`);
          continue;
        }

        // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –Ω–∞–∑–≤—É —Ñ–∞–π–ª—É
        const currentFileName = path.basename(account.maFilePath);
        console.log(`[renameMaFiles] –ü–æ—Ç–æ—á–Ω–∞ –Ω–∞–∑–≤–∞ —Ñ–∞–π–ª—É: ${currentFileName}`);
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –Ω–∞–∑–≤—É —Ñ–∞–π–ª—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ª–æ–≥—ñ–Ω—É –∞–∫–∞—É–Ω—Ç—É
        const newFileName = `${account.login}.maFile`;
        console.log(`[renameMaFiles] –ù–æ–≤–∞ –Ω–∞–∑–≤–∞ —Ñ–∞–π–ª—É: ${newFileName}`);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞—Ç–∏
        if (currentFileName === newFileName) {
          console.log(`[renameMaFiles] –§–∞–π–ª –¥–ª—è –∞–∫–∞—É–Ω—Ç—É ${account.login} –≤–∂–µ –º–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω—É –Ω–∞–∑–≤—É`);
          skippedCount++;
          continue;
        }
        
        const newFilePath = path.join(maFilesPath, newFileName);
        console.log(`[renameMaFiles] –ù–æ–≤–∏–π –ø–æ–≤–Ω–∏–π —à–ª—è—Ö: ${newFilePath}`);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ —ñ—Å–Ω—É—î —Ñ–∞–π–ª –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é
        if (fs.existsSync(newFilePath) && newFilePath !== account.maFilePath) {
          console.error(`[renameMaFiles] –§–∞–π–ª –∑ –Ω–∞–∑–≤–æ—é ${newFileName} –≤–∂–µ —ñ—Å–Ω—É—î`);
          errors.push(`–§–∞–π–ª –∑ –Ω–∞–∑–≤–æ—é ${newFileName} –≤–∂–µ —ñ—Å–Ω—É—î`);
          continue;
        }
        
        // –í–∏–∫–æ–Ω—É—î–º–æ –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è
        try {
          console.log(`[renameMaFiles] –ü–µ—Ä–µ–π–º–µ–Ω–æ–≤—É—î–º–æ —Ñ–∞–π–ª –∑ ${account.maFilePath} –Ω–∞ ${newFilePath}`);
          fs.renameSync(account.maFilePath, newFilePath);
          console.log(`[renameMaFiles] ‚úÖ –£–°–ü–Ü–®–ù–û –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤–∞–Ω–æ: ${currentFileName} -> ${newFileName}`);
          
          // –û–Ω–æ–≤–ª—é—î–º–æ —à–ª—è—Ö –≤ –∞–∫–∞—É–Ω—Ç—ñ
          account.maFilePath = newFilePath;
          console.log(`[renameMaFiles] –û–Ω–æ–≤–ª–µ–Ω–æ maFilePath –¥–ª—è –∞–∫–∞—É–Ω—Ç—É ${account.login}`);
          
          renamedCount++;
          
        } catch (renameError) {
          console.error(`[renameMaFiles] –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É –¥–ª—è –∞–∫–∞—É–Ω—Ç—É ${account.login}:`, renameError);
          errors.push(`–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É –¥–ª—è ${account.login}: ${renameError.message}`);
        }
        
      } catch (error) {
        console.error(`[renameMaFiles] –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞–∫–∞—É–Ω—Ç—É ${account.login}:`, error);
        errors.push(`–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞–∫–∞—É–Ω—Ç—É ${account.login}: ${error.message}`);
      }
    }

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏
    if (renamedCount > 0) {
      console.log(`[renameMaFiles] –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –ø—ñ—Å–ª—è ${renamedCount} –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω—å`);
      try {
        saveAccounts();
        console.log(`[renameMaFiles] –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ`);
      } catch (saveError) {
        console.error(`[renameMaFiles] –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:`, saveError);
        errors.push(`–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: ${saveError.message}`);
      }
    }

    // –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log(`\n[renameMaFiles] === –ü–Ü–î–°–£–ú–û–ö ===`);
    console.log(`[renameMaFiles] –ü–µ—Ä–µ–π–º–µ–Ω–æ–≤–∞–Ω–æ: ${renamedCount}`);
    console.log(`[renameMaFiles] –ü—Ä–æ–ø—É—â–µ–Ω–æ (–≤–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –Ω–∞–∑–≤–∏): ${skippedCount}`);
    console.log(`[renameMaFiles] –ü–æ–º–∏–ª–æ–∫: ${errors.length}`);
    
    let message = `–ü–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!<br>‚Ä¢ –ü–µ—Ä–µ–π–º–µ–Ω–æ–≤–∞–Ω–æ: ${renamedCount} —Ñ–∞–π–ª—ñ–≤<br>‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount} —Ñ–∞–π–ª—ñ–≤`;
    
    if (errors.length > 0) {
      message += `<br>‚Ä¢ –ü–æ–º–∏–ª–∫–∏ (${errors.length}):<br>${errors.slice(0, 3).join('<br>')}`;
      if (errors.length > 3) {
        message += `<br>... —Ç–∞ —â–µ ${errors.length - 3} –ø–æ–º–∏–ª–æ–∫`;
      }
      console.log(`[renameMaFiles] –ü–æ–º–∏–ª–∫–∏:`, errors);
    }
    
    const notificationType = errors.length > 0 ? 'warning' : (renamedCount > 0 ? 'success' : 'info');
    showNotification(message, notificationType);
    
  } catch (error) {
    console.error('[renameMaFiles] –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
    showNotification('–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è: ' + error.message, 'error');
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ (–∫–Ω–æ–ø–∫–∞ –≤ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ)
async function manualRenameFiles() {
  console.log('[manualRenameFiles] –†—É—á–Ω–∏–π –∑–∞–ø—É—Å–∫ –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è...');
  showNotification('üîÑ –ó–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è .maFile —Ñ–∞–π–ª—ñ–≤...', 'info');
  
  try {
    await renameMaFilesToAccountNames();
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—ñ—Å–ª—è –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è
    setTimeout(() => {
      if (searchQuery && searchQuery !== '') {
        searchAccounts(searchQuery);
      } else {
        filteredAccounts = [...accounts];
        render();
      }
    }, 1000);
    
  } catch (error) {
    console.error('[manualRenameFiles] –ü–æ–º–∏–ª–∫–∞:', error);
    showNotification('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è: ' + error.message, 'error');
  }
}

// ===============================
// –§–£–ù–ö–¶–Ü–û–ù–ê–õ –ü–û–†–¢–§–û–õ–Ü–û
// ===============================

let portfolioChart = null;
let valueChart = null;

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ
function showPortfolio() {
  console.log('[Portfolio] –ü–æ–∫–∞–∑ –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ...');
  calculateAndDisplayPortfolio();
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ
  if (shouldAutoLoadInventories()) {
    setTimeout(() => {
      const shouldLoad = confirm('üéÆ –ü–æ—Ä—Ç—Ñ–æ–ª—ñ–æ: –í–∏—è–≤–ª–µ–Ω–æ –º–∞–ª–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ–≤.\n\nüì¶ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ CS:GO —Ç–∞ TF2 –¥–ª—è –≤—Å—ñ—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ?\n\n‚è±Ô∏è –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω...');
      
      if (shouldLoad) {
        autoLoadAllInventories();
      }
    }, 1000);
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ
function refreshPortfolio() {
  console.log('[Portfolio] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ...');
  showNotification('üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ...', 'info');
  calculateAndDisplayPortfolio();
}

// –§—É–Ω–∫—Ü—ñ—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è –¥–ª—è –≤—Å—ñ—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤
async function autoLoadAllInventories() {
  console.log('[Portfolio] –ü–æ—á–∞—Ç–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ–≤...');
  
  showNotification('üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ–≤ –¥–ª—è –≤—Å—ñ—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤...', 'info');
  
  const accountsWithCredentials = accounts.filter(acc => 
    acc.login && acc.password && acc.login.trim() !== '' && acc.password.trim() !== ''
  );
  
  if (accountsWithCredentials.length === 0) {
    showNotification('‚ùå –ù–µ–º–∞—î –∞–∫–∞—É–Ω—Ç—ñ–≤ –∑ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏ –¥–ª—è –≤—Ö–æ–¥—É', 'warning');
    return;
  }
  
  console.log(`[Portfolio] –ó–Ω–∞–π–¥–µ–Ω–æ ${accountsWithCredentials.length} –∞–∫–∞—É–Ω—Ç—ñ–≤ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è`);
  
  let successCount = 0;
  let errorCount = 0;
  
  // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ —á–µ—Ä–∑—ñ —â–æ–± –Ω–µ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ Steam API
  for (let i = 0; i < accountsWithCredentials.length; i++) {
    const account = accountsWithCredentials[i];
    const originalIndex = accounts.indexOf(account);
    
    try {
      console.log(`[Portfolio] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è ${i + 1}/${accountsWithCredentials.length}: ${account.login}`);
      
      showNotification(`üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è ${account.login || account.name} (${i + 1}/${accountsWithCredentials.length})`, 'info');
      
      // –í–∏–∫–ª–∏–∫–∞—î–º–æ —ñ—Å–Ω—É—é—á—É —Ñ—É–Ω–∫—Ü—ñ—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è
      await fetchFullInventory(originalIndex);
      
      successCount++;
      console.log(`[Portfolio] ‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä –¥–ª—è ${account.login}`);
      
      // –ü–∞—É–∑–∞ –º—ñ–∂ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º–∏ —â–æ–± –Ω–µ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ API
      if (i < accountsWithCredentials.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 3000)); // 3 —Å–µ–∫—É–Ω–¥–∏ –º—ñ–∂ –∞–∫–∞—É–Ω—Ç–∞–º–∏
      }
      
    } catch (error) {
      errorCount++;
      console.error(`[Portfolio] ‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–ª—è ${account.login}:`, error);
    }
  }
  
  console.log(`[Portfolio] –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∞–≤—Ç–æ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è. –£—Å–ø—ñ—à–Ω–æ: ${successCount}, –ü–æ–º–∏–ª–æ–∫: ${errorCount}`);
  
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —á–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
  localStorage.setItem('lastAutoInventoryLoad', Date.now().toString());
  
  if (successCount > 0) {
    showNotification(`‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ –¥–ª—è ${successCount} –∞–∫–∞—É–Ω—Ç—ñ–≤!${errorCount > 0 ? ` (${errorCount} –ø–æ–º–∏–ª–æ–∫)` : ''}`, 'success');
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    setTimeout(() => {
      calculateAndDisplayPortfolio();
    }, 1000);
  } else {
    showNotification(`‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∂–æ–¥–µ–Ω —ñ–Ω–≤–µ–Ω—Ç–∞—Ä (${errorCount} –ø–æ–º–∏–ª–æ–∫)`, 'error');
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ
function shouldAutoLoadInventories() {
  const accountsWithInventory = accounts.filter(acc => 
    acc.fullInventory && acc.fullInventory.length > 0
  );
  
  const accountsWithCredentials = accounts.filter(acc => 
    acc.login && acc.password && acc.login.trim() !== '' && acc.password.trim() !== ''
  );
  
  // –Ø–∫—â–æ –º–µ–Ω—à–µ 50% –∞–∫–∞—É–Ω—Ç—ñ–≤ –º–∞—é—Ç—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π —ñ–Ω–≤–µ–Ω—Ç–∞—Ä, –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –∞–≤—Ç–æ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
  const loadedPercentage = accountsWithCredentials.length > 0 ? 
    (accountsWithInventory.length / accountsWithCredentials.length) * 100 : 0;
  
  console.log(`[Portfolio] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ–≤: ${accountsWithInventory.length}/${accountsWithCredentials.length} (${loadedPercentage.toFixed(1)}%)`);
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (–Ω–µ —á–∞—Å—Ç—ñ—à–µ –Ω—ñ–∂ —Ä–∞–∑ –Ω–∞ –≥–æ–¥–∏–Ω—É)
  const lastAutoLoad = localStorage.getItem('lastAutoInventoryLoad');
  const now = Date.now();
  const oneHour = 60 * 60 * 1000; // 1 –≥–æ–¥–∏–Ω–∞ –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
  
  if (lastAutoLoad && (now - parseInt(lastAutoLoad)) < oneHour) {
    console.log('[Portfolio] –ê–≤—Ç–æ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–æ - –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞–ª–∏ –º–µ–Ω—à–µ –≥–æ–¥–∏–Ω–∏ —Ç–æ–º—É');
    return false;
  }
  
  return loadedPercentage < 50;
}

// –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ
function calculateAndDisplayPortfolio() {
  try {
    const portfolioData = calculatePortfolioStats();
    updatePortfolioSummary(portfolioData);
    renderPortfolioAccounts(portfolioData.accountsWithInventory);
    renderPortfolioCharts(portfolioData);
    
    console.log('[Portfolio] –ü–æ—Ä—Ç—Ñ–æ–ª—ñ–æ –æ–Ω–æ–≤–ª–µ–Ω–æ:', portfolioData);
  } catch (error) {
    console.error('[Portfolio] –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ:', error);
    showNotification('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ: ' + error.message, 'error');
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ
function calculatePortfolioStats() {
  const stats = {
    totalInventoryValue: 0,
    totalInventoryItems: 0,
    activeAccounts: 0,
    averageValue: 0,
    accountsWithInventory: [],
    inventoryByAccount: {}
  };

  accounts.forEach(account => {
    let hasInventory = false;
    const accountStats = {
      login: account.login,
      name: account.name || account.login,
      inventory: [],
      totalInventoryValue: 0,
      inventoryCount: 0
    };

    // –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–≤–Ω–∏–π —ñ–Ω–≤–µ–Ω—Ç–∞—Ä CS:GO —Ç–∞ TF2
    if (account.fullInventory && account.fullInventory.length > 0) {
      hasInventory = true;
      
      account.fullInventory.forEach(item => {
        if (item && item.priceUAH) {
          const price = parseFloat(item.priceUAH) || 0;
          stats.totalInventoryValue += price;
          stats.totalInventoryItems++;
          accountStats.totalInventoryValue += price;
          accountStats.inventoryCount++;
          
          accountStats.inventory.push({
            name: item.name || '–ù–µ–≤—ñ–¥–æ–º–∏–π –ø—Ä–µ–¥–º–µ—Ç',
            imageUrl: item.imageUrl || '',
            price: item.priceUAH || '0',
            originalPrice: item.originalPrice || item.price || '$0.00',
            type: item.type || '',
            rarity: item.rarity || '',
            tradeable: item.tradeable || false,
            marketable: item.marketable || false,
            game: item.game || 'Unknown'
          });
        }
      });
    }

    if (hasInventory) {
      stats.activeAccounts++;
      stats.accountsWithInventory.push(accountStats);
      stats.inventoryByAccount[account.login] = accountStats.inventoryCount;
    }
  });

  // –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  stats.averageValue = stats.totalInventoryItems > 0 ? stats.totalInventoryValue / stats.totalInventoryItems : 0;
  
  // –°–æ—Ä—Ç—É—î–º–æ –∞–∫–∞—É–Ω—Ç–∏ –∑–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—é —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è
  stats.accountsWithInventory.sort((a, b) => b.totalInventoryValue - a.totalInventoryValue);

  return stats;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updatePortfolioSummary(portfolioData) {
  const totalValueEl = document.getElementById('total-portfolio-value');
  const totalDropsEl = document.getElementById('total-drops-count');
  const activeAccountsEl = document.getElementById('active-accounts-count');
  const averageDropValueEl = document.getElementById('average-drop-value');

  if (totalValueEl) {
    totalValueEl.textContent = `‚Ç¥${portfolioData.totalInventoryValue.toFixed(2)}`;
  }
  
  if (totalDropsEl) {
    totalDropsEl.textContent = portfolioData.totalInventoryItems.toString();
  }
  
  if (activeAccountsEl) {
    activeAccountsEl.textContent = portfolioData.activeAccounts.toString();
  }
  
  if (averageDropValueEl) {
    averageDropValueEl.textContent = `‚Ç¥${portfolioData.averageValue.toFixed(2)}`;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—ñ–≤ –∑ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º
function renderPortfolioAccounts(accountsWithInventory) {
  const container = document.getElementById('portfolio-accounts');
  if (!container) return;

  if (accountsWithInventory.length === 0) {
    container.innerHTML = `
      <div class="no-drops-message">
        <p>üì≠ –ù–µ–º–∞—î —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è</p>
        <p>–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä CS:GO —Ç–∞ Team Fortress 2 –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø—Ä–µ–¥–º–µ—Ç—ñ–≤</p>
      </div>
    `;
    return;
  }

  container.innerHTML = accountsWithInventory.map(account => `
    <div class="portfolio-account-card">
      <div class="portfolio-account-header">
        <div class="portfolio-account-name">${escapeHtml(account.name)}</div>
        <div class="portfolio-account-stats">
          <span>üì¶ –ü—Ä–µ–¥–º–µ—Ç—ñ–≤: ${account.inventoryCount}</span>
          <span>üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è: ‚Ç¥${account.totalInventoryValue.toFixed(2)}</span>
        </div>
      </div>
      
      ${account.inventory.length > 0 ? `
        <div class="portfolio-section">
          <h4 class="portfolio-section-title">ÔøΩ –Ü–Ω–≤–µ–Ω—Ç–∞—Ä CS:GO —Ç–∞ Team Fortress 2</h4>
          
          ${(() => {
            // –ì—Ä—É–ø—É—î–º–æ –ø—Ä–µ–¥–º–µ—Ç–∏ –ø–æ —ñ–≥—Ä–∞—Ö
            const csgoItems = account.inventory.filter(item => item.game === 'CS:GO');
            const tf2Items = account.inventory.filter(item => item.game === 'TF2');
            
            let html = '';
            
            if (csgoItems.length > 0) {
              html += `
                <div class="game-section">
                  <h5 class="game-title">üî´ CS:GO (${csgoItems.length} –ø—Ä–µ–¥–º–µ—Ç—ñ–≤)</h5>
                  <div class="portfolio-drops-grid">
                    ${csgoItems.slice(0, 12).map(item => `
                      <div class="portfolio-drop-item">
                        ${item.imageUrl ? 
                          `<img src="${item.imageUrl}" alt="${escapeHtml(item.name)}" class="drop-image" onerror="this.style.display='none'">` : 
                          '<div class="drop-image" style="background: var(--bg-hover); display: flex; align-items: center; justify-content: center; font-size: 20px;">ÔøΩ</div>'
                        }
                        <div class="drop-info">
                          <div class="drop-name" title="${escapeHtml(item.name)}">${escapeHtml(item.name.length > 22 ? item.name.substring(0, 22) + '...' : item.name)}</div>
                          <div class="drop-price">‚Ç¥${item.price} ${item.tradeable ? '(üîÑ)' : '(üîí)'}</div>
                          ${item.type ? `<div class="item-type">${escapeHtml(item.type)}</div>` : ''}
                        </div>
                      </div>
                    `).join('')}
                    ${csgoItems.length > 12 ? `
                      <div class="portfolio-drop-item more-items-indicator">
                        <div class="drop-image" style="background: var(--bg-hover); display: flex; align-items: center; justify-content: center; font-size: 16px; color: var(--emerald-400);">+${csgoItems.length - 12}</div>
                        <div class="drop-info">
                          <div class="drop-name">–©–µ CS:GO –ø—Ä–µ–¥–º–µ—Ç—ñ–≤</div>
                          <div class="drop-price">...</div>
                        </div>
                      </div>
                    ` : ''}
                  </div>
                </div>
              `;
            }
            
            if (tf2Items.length > 0) {
              html += `
                <div class="game-section">
                  <h5 class="game-title">ÔøΩ Team Fortress 2 (${tf2Items.length} –ø—Ä–µ–¥–º–µ—Ç—ñ–≤)</h5>
                  <div class="portfolio-drops-grid">
                    ${tf2Items.slice(0, 12).map(item => `
                      <div class="portfolio-drop-item">
                        ${item.imageUrl ? 
                          `<img src="${item.imageUrl}" alt="${escapeHtml(item.name)}" class="drop-image" onerror="this.style.display='none'">` : 
                          '<div class="drop-image" style="background: var(--bg-hover); display: flex; align-items: center; justify-content: center; font-size: 20px;">ÔøΩ</div>'
                        }
                        <div class="drop-info">
                          <div class="drop-name" title="${escapeHtml(item.name)}">${escapeHtml(item.name.length > 22 ? item.name.substring(0, 22) + '...' : item.name)}</div>
                          <div class="drop-price">‚Ç¥${item.price} ${item.tradeable ? '(üîÑ)' : '(üîí)'}</div>
                          ${item.type ? `<div class="item-type">${escapeHtml(item.type)}</div>` : ''}
                        </div>
                      </div>
                    `).join('')}
                    ${tf2Items.length > 12 ? `
                      <div class="portfolio-drop-item more-items-indicator">
                        <div class="drop-image" style="background: var(--bg-hover); display: flex; align-items: center; justify-content: center; font-size: 16px; color: var(--emerald-400);">+${tf2Items.length - 12}</div>
                        <div class="drop-info">
                          <div class="drop-name">–©–µ TF2 –ø—Ä–µ–¥–º–µ—Ç—ñ–≤</div>
                          <div class="drop-price">...</div>
                        </div>
                      </div>
                    ` : ''}
                  </div>
                </div>
              `;
            }
            
            return html;
          })()}
        </div>
      ` : `
        <div class="no-data-message">
          <p>üì≠ –Ü–Ω–≤–µ–Ω—Ç–∞—Ä –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π</p>
          <p>–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "üì¶ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–æ–≤–Ω–∏–π —ñ–Ω–≤–µ–Ω—Ç–∞—Ä" –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</p>
        </div>
      `}
    </div>
  `).join('');
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
function renderPortfolioCharts(portfolioData) {
  // –ó–Ω–∏—â—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –≥—Ä–∞—Ñ—ñ–∫–∏ —è–∫—â–æ —î
  if (portfolioChart) {
    portfolioChart.destroy();
    portfolioChart = null;
  }
  if (valueChart) {
    valueChart.destroy();
    valueChart = null;
  }

  const dropsCanvas = document.getElementById('dropsChart');
  const valueCanvas = document.getElementById('valueChart');
  
  if (!dropsCanvas || !valueCanvas) return;

  const accounts = portfolioData.accountsWithInventory.slice(0, 10); // –ü–æ–∫–∞–∑—É—î–º–æ —Ç–æ–ø 10 –∞–∫–∞—É–Ω—Ç—ñ–≤
  
  if (accounts.length === 0) return;

  const labels = accounts.map(acc => acc.name);
  const inventoryData = accounts.map(acc => acc.inventoryCount);
  const valueData = accounts.map(acc => acc.totalInventoryValue);

  // –ì—Ä–∞—Ñ—ñ–∫ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ
  const dropsCtx = dropsCanvas.getContext('2d');
  portfolioChart = new Chart(dropsCtx, {
    type: 'bar',
    data: {
      labels: labels,
      datasets: [{
        label: '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ñ–≤',
        data: inventoryData,
        backgroundColor: 'rgba(16, 185, 129, 0.6)',
        borderColor: 'rgba(16, 185, 129, 1)',
        borderWidth: 2,
        borderRadius: 8,
        borderSkipped: false,
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          labels: {
            color: '#a7f3d0'
          }
        },
        title: {
          display: true,
          text: '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ –ø–æ –∞–∫–∞—É–Ω—Ç–∞—Ö',
          color: '#6ee7b7',
          font: {
            size: 16,
            weight: 'bold'
          }
        }
      },
      scales: {
        y: {
          beginAtZero: true,
          ticks: {
            color: '#6ee7b7',
            stepSize: 1
          },
          grid: {
            color: 'rgba(110, 231, 183, 0.1)'
          }
        },
        x: {
          ticks: {
            color: '#6ee7b7',
            maxRotation: 45
          },
          grid: {
            color: 'rgba(110, 231, 183, 0.1)'
          }
        }
      }
    }
  });

  // –ì—Ä–∞—Ñ—ñ–∫ –≤–∞—Ä—Ç–æ—Å—Ç—ñ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è
  const valueCtx = valueCanvas.getContext('2d');
  valueChart = new Chart(valueCtx, {
    type: 'doughnut',
    data: {
      labels: labels,
      datasets: [{
        label: '–í–∞—Ä—Ç—ñ—Å—Ç—å —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è (‚Ç¥)',
        data: valueData,
        backgroundColor: [
          'rgba(16, 185, 129, 0.8)',
          'rgba(52, 211, 153, 0.8)',
          'rgba(110, 231, 183, 0.8)',
          'rgba(167, 243, 208, 0.8)',
          'rgba(209, 250, 229, 0.8)',
          'rgba(5, 150, 105, 0.8)',
          'rgba(4, 120, 87, 0.8)',
          'rgba(6, 95, 70, 0.8)',
          'rgba(6, 78, 59, 0.8)',
          'rgba(2, 44, 34, 0.8)'
        ],
        borderColor: 'rgba(16, 185, 129, 1)',
        borderWidth: 2
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          position: 'bottom',
          labels: {
            color: '#a7f3d0',
            usePointStyle: true,
            padding: 15
          }
        },
        title: {
          display: true,
          text: '–†–æ–∑–ø–æ–¥—ñ–ª –≤–∞—Ä—Ç–æ—Å—Ç—ñ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è',
          color: '#6ee7b7',
          font: {
            size: 16,
            weight: 'bold'
          }
        },
        tooltip: {
          callbacks: {
            label: function(context) {
              const value = context.parsed;
              const total = context.dataset.data.reduce((sum, val) => sum + val, 0);
              const percentage = ((value / total) * 100).toFixed(1);
              return `${context.label}: ‚Ç¥${value.toFixed(2)} (${percentage}%)`;
            }
          }
        }
      }
    }
  });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –µ–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è HTML
function escapeHtml(unsafe) {
  if (!unsafe) return '';
  return unsafe
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&#039;");
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
document.addEventListener('DOMContentLoaded', function() {
  // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ç–∞–±—É
  const portfolioTab = document.querySelector('[onclick*="portfolio-tab"]');
  if (portfolioTab) {
    portfolioTab.addEventListener('click', function() {
      setTimeout(() => {
        showPortfolio();
        updateAutoLoadButtonText(); // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ
      }, 100);
    });
  }
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
  checkAutoLoadOnStartup();
  
  // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
  setTimeout(updateAutoLoadButtonText, 500);
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–≤—Ç–æ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
function checkAutoLoadOnStartup() {
  const autoLoadSetting = localStorage.getItem('autoLoadInventoryOnStartup');
  
  if (autoLoadSetting === 'true') {
    console.log('[Portfolio] –ê–≤—Ç–æ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ –∞–∫—Ç–∏–≤–Ω–µ');
    
    // –ó–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
    setTimeout(() => {
      if (shouldAutoLoadInventories()) {
        console.log('[Portfolio] –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ...');
        autoLoadAllInventories();
      }
    }, 5000); // 5 —Å–µ–∫—É–Ω–¥ –ø—ñ—Å–ª—è —Å—Ç–∞—Ä—Ç—É
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —É–≤—ñ–º–∫–Ω–µ–Ω–Ω—è/–≤–∏–º–∫–Ω–µ–Ω–Ω—è –∞–≤—Ç–æ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
function toggleAutoLoadOnStartup() {
  const currentSetting = localStorage.getItem('autoLoadInventoryOnStartup') === 'true';
  const newSetting = !currentSetting;
  
  localStorage.setItem('autoLoadInventoryOnStartup', newSetting.toString());
  
  const status = newSetting ? '—É–≤—ñ–º–∫–Ω–µ–Ω–æ' : '–≤–∏–º–∫–Ω–µ–Ω–æ';
  showNotification(`‚öôÔ∏è –ê–≤—Ç–æ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ ${status}`, newSetting ? 'success' : 'info');
  
  console.log(`[Portfolio] –ê–≤—Ç–æ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ ${status}`);
  
  // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
  updateAutoLoadButtonText();
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
// Set global trade link from input
window.setGlobalTradeLink = function() {
  const input = document.getElementById('globalTradeLinkInput');
  if (input) {
    globalTradeLink = input.value.trim();
    localStorage.setItem('globalTradeLink', globalTradeLink);
    showNotification('–ì–ª–æ–±–∞–ª—å–Ω–∞ —Ç—Ä–µ–π–¥-–ª—ñ–Ω–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞!', 'success');
  }
};

// Modal logic for global trade link skin transfer
globalThis.openGlobalTradeModal = function(accountIndex) {
  const acc = accounts[accountIndex];
  // Check if there is inventory to transfer
  const hasCS2 = acc.fullInventory && acc.fullInventory.some(item => item.gameApp === 'CS:GO' || item.game === 'CS:GO');
  const hasTF2 = acc.fullInventory && acc.fullInventory.some(item => item.gameApp === 'TF2' || item.game === 'TF2');
  if (!hasCS2 && !hasTF2) {
    showNotification('–£ –∞–∫–∞—É–Ω—Ç–∞ –Ω–µ–º–∞—î —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è CS2 –∞–±–æ TF2 –¥–ª—è –ø–µ—Ä–µ–∫–∏–¥–∞–Ω–Ω—è!', 'warning');
    return;
  }
  const modal = document.createElement('div');
  modal.className = 'global-trade-modal';
  modal.innerHTML = `
    <div class="global-trade-modal-content">
      <h3><span class="modal-icon">üåê</span> –í–∏–±–µ—Ä—ñ—Ç—å –≥—Ä—É –¥–ª—è –ø–µ—Ä–µ–∫–∏–¥–∞–Ω–Ω—è —Å–∫—ñ–Ω—ñ–≤</h3>
      <div class="game-select">
        <button class="game-btn" onclick="window.sendGlobalTrade(${accountIndex}, 'CS2')" ${!hasCS2 ? 'disabled style="opacity:0.5;cursor:not-allowed;"' : ''}>
          <span class="game-icon">üî´</span> CS2
        </button>
        <button class="game-btn" onclick="window.sendGlobalTrade(${accountIndex}, 'TF2')" ${!hasTF2 ? 'disabled style="opacity:0.5;cursor:not-allowed;"' : ''}>
          <span class="game-icon">üõ°Ô∏è</span> Team Fortress 2
        </button>
      </div>
      <button onclick="window.closeGlobalTradeModal()" class="close-modal">–ó–∞–∫—Ä–∏—Ç–∏</button>
    </div>
  `;
  document.body.appendChild(modal);
};

globalThis.closeGlobalTradeModal = function() {
  const modal = document.querySelector('.global-trade-modal');
  if (modal) modal.remove();
};

globalThis.sendGlobalTrade = async function(accountIndex, game) {
  const acc = accounts[accountIndex];
  if (!globalTradeLink || globalTradeLink.trim() === '') {
    showNotification('–ì–ª–æ–±–∞–ª—å–Ω–∞ —Ç—Ä–µ–π–¥-–ª—ñ–Ω–∫–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞!', 'error');
    return;
  }
  // Inventory check for CS2
  if (game === 'CS2') {
    const hasCS2 = acc.fullInventory && acc.fullInventory.some(item => item.gameApp === 'CS:GO' || item.game === 'CS:GO');
    if (!hasCS2) {
      showNotification('–£ –∞–∫–∞—É–Ω—Ç–∞ –Ω–µ–º–∞—î —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è CS2 –¥–ª—è –ø–µ—Ä–µ–∫–∏–¥–∞–Ω–Ω—è!', 'warning');
      return;
    }
  }
  showLoadingIndicator(`–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—Å—ñ—Ö —Å–∫—ñ–Ω—ñ–≤ –∑ ${game} –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—É —Ç—Ä–µ–π–¥-–ª—ñ–Ω–∫—É...`);
  try {
    let appIDs = [];
    if (game === 'CS2') appIDs = [{ appid: 730, contextid: 2 }];
    else if (game === 'TF2') appIDs = [{ appid: 440, contextid: 2 }];
    else appIDs = [{ appid: 730, contextid: 2 }, { appid: 440, contextid: 2 }];

    let maFilePath = acc.maFilePath;
    if (!maFilePath || !fs.existsSync(maFilePath)) {
      if (maFilesPath) maFilePath = path.join(maFilesPath, acc.login + '.maFile');
      if (!maFilePath || !fs.existsSync(maFilePath)) throw new Error('maFile –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∞–∫–∞—É–Ω—Ç–∞ ' + acc.login);
    }
    const maFile = JSON.parse(fs.readFileSync(maFilePath));
    const identitySecret = maFile.identity_secret;
    const sharedSecret = maFile.shared_secret;
    if (!identitySecret || !sharedSecret) throw new Error('maFile –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Å–µ–∫—Ä–µ—Ç—ñ–≤');

    tradeManager = new TradeManager();
    await tradeManager.login(acc.login, acc.password, SteamTotp.generateAuthCode(sharedSecret), identitySecret);
    const result = await tradeManager.sendAllTradeableItems(globalTradeLink, appIDs);
    showNotification(result.message || '‚úÖ –í—Å—ñ —Å–∫—ñ–Ω–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!', 'success');
    tradeManager.disconnect();
  } catch (e) {
    console.error('[sendGlobalTrade] –ü–æ–º–∏–ª–∫–∞:', e);
    showNotification('‚ùå –ü–æ–º–∏–ª–∫–∞: ' + (e.message || e), 'error');
  } finally {
    hideLoadingIndicator();
    window.closeGlobalTradeModal();
  }
};
function updateAutoLoadButtonText() {
  const autoLoadButton = document.querySelector('.auto-setting-btn');
  if (autoLoadButton) {
    const isEnabled = localStorage.getItem('autoLoadInventoryOnStartup') === 'true';
    const textElement = autoLoadButton.childNodes[autoLoadButton.childNodes.length - 1];
    if (textElement && textElement.nodeType === Node.TEXT_NODE) {
      textElement.textContent = isEnabled ? ' –ê–≤—Ç–æ: –í–ö–õ' : ' –ê–≤—Ç–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ';
    }
    
    // –ó–º—ñ–Ω—é—î–º–æ —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å—Ç–∞–Ω—É
    if (isEnabled) {
      autoLoadButton.style.background = 'linear-gradient(135deg, var(--emerald-600), var(--emerald-700))';
      autoLoadButton.style.boxShadow = '0 4px 12px rgba(16, 185, 129, 0.25)';
    } else {
      autoLoadButton.style.background = 'linear-gradient(135deg, var(--emerald-400), var(--emerald-500))';
      autoLoadButton.style.boxShadow = '0 4px 12px rgba(16, 185, 129, 0.1)';
    }
  }
}
