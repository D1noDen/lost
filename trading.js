const fs = require('fs');
const path = require('path');
const { ipcRenderer } = require('electron');
const TradeManager = require('./trade_manager.js');
const SteamTotp = require('steam-totp');

const tradeManager = new TradeManager();
let activeOffers = [];
let selectedAccountName = null;
const historyFilePath = path.join(__dirname, 'trade_history.json');

function showTab(tabId, element) {
    document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
    document.querySelectorAll('.tab-button').forEach(button => button.classList.remove('active'));
    document.getElementById(tabId).classList.add('active');
    element.classList.add('active');
}

function saveToHistory(entry) {
    let history = [];
    if (fs.existsSync(historyFilePath)) {
        try {
            history = JSON.parse(fs.readFileSync(historyFilePath));
        } catch (e) {
            console.error('Error reading trade_history.json:', e);
        }
    }
    history.unshift(entry);
    fs.writeFileSync(historyFilePath, JSON.stringify(history, null, 2));
}

function loadAndRenderHistory() {
    if (fs.existsSync(historyFilePath)) {
        try {
            const history = JSON.parse(fs.readFileSync(historyFilePath));
            renderHistory(history);
        } catch (e) {
            console.error('Error reading or parsing trade_history.json:', e);
            renderHistory([]);
        }
    } else {
        renderHistory([]);
    }
}

function renderHistory(history) {
    const container = document.getElementById('history-container');
    container.innerHTML = '';

    if (history.length === 0) {
        container.innerHTML = `
            <div class="no-trades">
                <div class="icon">üìä</div>
                <h3>–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è</h3>
                <p>–¢—É—Ç –±—É–¥—É—Ç—å –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω—ñ —É–≥–æ–¥–∏</p>
            </div>
        `;
        return;
    }

    history.forEach(entry => {
        const div = document.createElement('div');
        div.className = 'trade-offer';

        const itemsToGiveHtml = entry.itemsGiven.map(renderItem).join('');
        const itemsToReceiveHtml = entry.itemsReceived.map(renderItem).join('');
        const tradeDate = new Date(entry.date).toLocaleDateString('uk-UA');
        const tradeTime = new Date(entry.date).toLocaleTimeString('uk-UA');
        const headerClass = entry.status.toLowerCase();
        const statusText = entry.status === 'Accepted' ? '–ü—Ä–∏–π–Ω—è—Ç–æ' : '–í—ñ–¥—Ö–∏–ª–µ–Ω–æ';
        const statusIcon = entry.status === 'Accepted' ? '‚úÖ' : '‚ùå';
        const statusBadgeClass = entry.status === 'Accepted' ? 'status-accepted' : 'status-declined';

        div.innerHTML = `
            <div class="trade-header ${headerClass}">
                <h3>${statusIcon} –¢—Ä–µ–π–¥ #${entry.id}</h3>
                <div class="trade-meta">
                    <span class="status-badge ${statusBadgeClass}">${statusText}</span>
                    üë§ –ó: ${entry.partnerId} ‚Ä¢ üìÖ ${tradeDate} ${tradeTime}
                </div>
            </div>
            <div class="trade-body">
                <div class="trade-section">
                    <h4>üì§ –í–∏ –≤—ñ–¥–¥–∞–ª–∏</h4>
                    <div class="items-grid">
                        ${itemsToGiveHtml || '<div class="no-items">üö´ –ù—ñ—á–æ–≥–æ</div>'}
                    </div>
                </div>
                <div class="trade-section">
                    <h4>üì• –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏</h4>
                    <div class="items-grid">
                        ${itemsToReceiveHtml || '<div class="no-items">üö´ –ù—ñ—á–æ–≥–æ</div>'}
                    </div>
                </div>
            </div>
        `;
        container.appendChild(div);
    });
}

async function loadAccountsManually() {
    try {
        const data = await ipcRenderer.invoke('get-accounts-data');
        const accounts = data.accounts;
        
        if (!accounts || accounts.length === 0) {
            alert('–ê–∫–∞—É–Ω—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!');
            return;
        }
        
        const accountSelect = document.getElementById('account-select');
        
        // –û—á–∏—â—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –æ–ø—Ü—ñ—ó
        accountSelect.innerHTML = '';
        
        accounts.forEach(account => {
            const option = document.createElement('option');
            option.value = account.login;
            option.textContent = account.name || account.login;
            accountSelect.appendChild(option);
        });

        // –ü–æ–∫–∞–∑—É—î–º–æ —Å–µ–ª–µ–∫—Ç —Ç–∞ –∫–Ω–æ–ø–∫—É –ª–æ–≥—ñ–Ω—É
        accountSelect.style.display = 'block';
        document.getElementById('login-btn').style.display = 'inline-block';
        
        // –•–æ–≤–∞—î–º–æ –∫–Ω–æ–ø–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        event.target.style.display = 'none';
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—ñ–≤:', error);
        alert('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—ñ–≤!');
    }
}

async function login() {
    const selectedLogin = document.getElementById('account-select').value;
    const accountSelect = document.getElementById('account-select');
    
    if (!selectedLogin) {
        // –ê–Ω—ñ–º—É—î–º–æ –ø–æ–º–∏–ª–∫—É
        accountSelect.className = 'with-icon error';
        accountSelect.style.animation = 'shake 0.5s ease-in-out';
        
        setTimeout(() => {
            accountSelect.className = 'with-icon ready';
            accountSelect.style.animation = '';
        }, 500);
        
        showMessage('‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç!', 'error');
        return;
    }
    
    try {
        const data = await ipcRenderer.invoke('get-accounts-data');
        const accounts = data.accounts;
        const selectedAccount = accounts.find(acc => acc.login === selectedLogin);
        
        if (!selectedAccount) {
            showMessage('‚ùå –ê–∫–∞—É–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!', 'error');
            return;
        }
        
        // –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        showMessage('üîê –í—Ö–æ–¥–∏–º–æ –≤ –∞–∫–∞—É–Ω—Ç...', 'loading');
        
        // –•–æ–≤–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ª–æ–≥—ñ–Ω—É —Ç–∞ –ø–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∞–∫–∞—É–Ω—Ç
        document.getElementById('login-container').style.display = 'none';
        const accountInfoDiv = document.getElementById('account-info');
        accountInfoDiv.style.display = 'block';
        
        // –ö—Ä–∞—Å–∏–≤–æ —Ñ–æ—Ä–º–∞—Ç—É—î–º–æ —ñ–º'—è –∞–∫–∞—É–Ω—Ç–∞
        const accountDisplayName = selectedAccount.name || selectedAccount.login;
        const primeIcon = selectedAccount.prime ? 'üëë' : '‚ö°';
        const farmingIcon = selectedAccount.farming ? 'üå±' : 'üí§';
        
        document.getElementById('current-account-name').innerHTML = 
            `${primeIcon} ${farmingIcon} ${accountDisplayName} <small style="color: #888;">(${selectedAccount.login})</small>`;
        
        selectedAccountName = selectedAccount.login;
        
        // –õ–æ–≥—ñ–Ω–∏–º–æ—Å—å —Ç—ñ–ª—å–∫–∏ –≤ –æ–¥–∏–Ω –æ–±—Ä–∞–Ω–∏–π –∞–∫–∞—É–Ω—Ç
        loginToNextAccount([selectedAccount], 0);
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É –≤ –∞–∫–∞—É–Ω—Ç:', error);
        showMessage('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É –≤ –∞–∫–∞—É–Ω—Ç!', 'error');
    }
}

function logout() {
    // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ loading-–∞–Ω—ñ–º–∞—Ü—ñ—ó
    hideLoadingMessages();
    const existingMessages = document.querySelectorAll('.success-message, .error-message');
    existingMessages.forEach(msg => msg.remove());
    
    document.getElementById('login-container').style.display = 'block';
    document.getElementById('account-info').style.display = 'none';
    
    // –°–∫–∏–¥–∞—î–º–æ —Å–µ–ª–µ–∫—Ç –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É
    const accountSelect = document.getElementById('account-select');
    if (accountSelect) {
        accountSelect.selectedIndex = 0; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–æ "–û–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç"
        accountSelect.className = 'with-icon ready'; // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –≥–æ—Ç–æ–≤–∏–π —Å—Ç–∞–Ω
    }
    
    selectedAccountName = null;
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤–∏—Ö—ñ–¥
    showMessage('üëã –í–∏ –≤–∏–π—à–ª–∏ –∑ –∞–∫–∞—É–Ω—Ç—É', 'success');
    
    // –í—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –≤—ñ–¥ Steam
    tradeManager.disconnect();
}

function loadTrades() {
    const statesToFetch = [
        1, // Active
        8, // CreatedNeedsConfirmation
        10 // InEscrow
    ];

    const offerPromises = statesToFetch.map(state => tradeManager.getOffers(state));

    Promise.all(offerPromises)
        .then(offerGroups => {
            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç—Ä–µ–π–¥—ñ–≤
            hideLoadingMessages();
            
            // Flatten the array of arrays and remove duplicates
            const allOffers = [].concat(...offerGroups);
            const uniqueOffers = allOffers.filter((offer, index, self) =>
                index === self.findIndex((o) => o.id === offer.id)
            );

            activeOffers = uniqueOffers;
            renderTrades(uniqueOffers);
        })
        .catch(err => {
            // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
            hideLoadingMessages();
            
            console.error('Failed to get trades:', err);
            showMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç—Ä–µ–π–¥—ñ–≤: ${err.message}`, 'error');
        });
}

function renderItem(item) {
    const nameColor = item.name_color ? `#${item.name_color}` : '#f1f1f1';
    const imageUrl = item.getImageURL ? item.getImageURL() : 
                    `https://community.cloudflare.steamstatic.com/economy/image/${item.icon_url}`;
    
    // –û–±—Ä—ñ–∑–∞—î–º–æ –¥–æ–≤–≥—ñ –Ω–∞–∑–≤–∏
    const shortName = item.name.length > 20 ? item.name.substring(0, 20) + '...' : item.name;
    
    return `
        <div class="item-card" title="${item.name}">
            <img src="${imageUrl}" alt="${item.name}" onerror="this.src='https://via.placeholder.com/64x64/333/fff?text=?'">
            <div class="item-name" style="color: ${nameColor};">
                ${shortName}
            </div>
        </div>
    `;
}

function renderTrades(offers) {
    const container = document.getElementById('trades-container');
    container.innerHTML = '';

    if (offers.length === 0) {
        container.innerHTML = `
            <div class="no-trades">
                <div class="icon">üì¶</div>
                <h3>–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —É–≥–æ–¥</h3>
                <p>–ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ–º–∞—î —Ç—Ä–µ–π–¥—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏</p>
            </div>
        `;
        return;
    }

    offers.forEach(offer => {
        const div = document.createElement('div');
        div.className = 'trade-offer';

        const itemsToGiveHtml = offer.itemsToGive.map(renderItem).join('');
        const itemsToReceiveHtml = offer.itemsToReceive.map(renderItem).join('');
        
        const partnerName = offer.partner ? offer.partner.getSteamID64() : '–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á';
        const offerDate = new Date(offer.created * 1000).toLocaleDateString('uk-UA');
        const offerTime = new Date(offer.created * 1000).toLocaleTimeString('uk-UA');

        div.innerHTML = `
            <div class="trade-header">
                <h3>üíº –¢—Ä–µ–π–¥ #${offer.id}</h3>
                <div class="trade-meta">
                    <span class="status-badge status-active">–ê–∫—Ç–∏–≤–Ω–∏–π</span>
                    üë§ –í—ñ–¥: ${partnerName} ‚Ä¢ üìÖ ${offerDate} ${offerTime}
                </div>
            </div>
            <div class="trade-body">
                <div class="trade-section">
                    <h4>üì§ –í–∏ –≤—ñ–¥–¥–∞—î—Ç–µ</h4>
                    <div class="items-grid">
                        ${itemsToGiveHtml || '<div class="no-items">üö´ –ù—ñ—á–æ–≥–æ</div>'}
                    </div>
                </div>
                <div class="trade-section">
                    <h4>üì• –í–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ</h4>
                    <div class="items-grid">
                        ${itemsToReceiveHtml || '<div class="no-items">üö´ –ù—ñ—á–æ–≥–æ</div>'}
                    </div>
                </div>
            </div>
            <div class="trade-actions">
                <button class="btn-accept" onclick="acceptTrade('${offer.id}')">
                    ‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏
                </button>
                <button class="btn-decline" onclick="declineTrade('${offer.id}')">
                    ‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏
                </button>
            </div>
        `;
        container.appendChild(div);
    });
}

function acceptTrade(offerId) {
    const offer = activeOffers.find(o => o.id === offerId);
    if (!offer) {
        showMessage('‚ùå –¢—Ä–µ–π–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!', 'error');
        return;
    }

    showMessage('‚è≥ –ü—Ä–∏–π–Ω—è—Ç—Ç—è —Ç—Ä–µ–π–¥—É...', 'loading');
    
    tradeManager.acceptOffer(offer)
        .then(() => {
            hideLoadingMessages();
            showMessage('‚úÖ –¢—Ä–µ–π–¥ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–π–Ω—è—Ç–æ!', 'success');
            const historyEntry = {
                id: offer.id,
                partnerId: offer.partner.getSteamID64(),
                status: 'Accepted',
                date: new Date().toISOString(),
                itemsGiven: offer.itemsToGive,
                itemsReceived: offer.itemsToReceive
            };
            saveToHistory(historyEntry);
            loadTrades();
        })
        .catch(err => {
            hideLoadingMessages();
            console.error('Failed to accept trade:', err);
            showMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–∏–π–Ω—è—Ç—Ç—ñ —Ç—Ä–µ–π–¥—É: ${err.message}`, 'error');
        });
}

function declineTrade(offerId) {
    const offer = activeOffers.find(o => o.id === offerId);
    if (!offer) {
        showMessage('‚ùå –¢—Ä–µ–π–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!', 'error');
        return;
    }

    if (!confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥—Ö–∏–ª–∏—Ç–∏ —Ü–µ–π —Ç—Ä–µ–π–¥?')) {
        return;
    }

    showMessage('‚è≥ –í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è —Ç—Ä–µ–π–¥—É...', 'loading');
    
    tradeManager.declineOffer(offer)
        .then(() => {
            hideLoadingMessages();
            showMessage('‚úÖ –¢—Ä–µ–π–¥ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ!', 'success');
            const historyEntry = {
                id: offer.id,
                partnerId: offer.partner.getSteamID64(),
                status: 'Declined',
                date: new Date().toISOString(),
                itemsGiven: offer.itemsToGive,
                itemsReceived: offer.itemsToReceive
            };
            saveToHistory(historyEntry);
            loadTrades();
        })
        .catch(err => {
            hideLoadingMessages();
            console.error('Failed to decline trade:', err);
            showMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—ñ —Ç—Ä–µ–π–¥—É: ${err.message}`, 'error');
        });
}

function hideLoadingMessages() {
    // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ loading –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑ –∫–ª–∞—Å–æ–º loading
    const loadingMessages = document.querySelectorAll('.loading');
    loadingMessages.forEach(msg => {
        if (msg.parentNode) {
            msg.remove();
        }
    });
    
    // –¢–∞–∫–æ–∂ –≤–∏–¥–∞–ª—è—î–º–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫—ñ div-–∏, —â–æ –º–æ–∂—É—Ç—å –º—ñ—Å—Ç–∏—Ç–∏ loading
    const loadingContainers = document.querySelectorAll('div:has(.loading)');
    loadingContainers.forEach(container => {
        if (container && !container.querySelector(':not(.loading)')) {
            container.remove();
        }
    });
}

function showMessage(text, type = 'info') {
    // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—ñ–ª—å—à –Ω–∞–¥—ñ–π–Ω–æ
    hideLoadingMessages();
    const existingMessages = document.querySelectorAll('.success-message, .error-message');
    existingMessages.forEach(msg => {
        if (msg.parentNode) {
            msg.remove();
        }
    });

    const messageDiv = document.createElement('div');
    
    if (type === 'loading') {
        messageDiv.className = 'loading';
        messageDiv.innerHTML = `
            <div class="spinner"></div>
            <div>${text}</div>
        `;
    } else {
        messageDiv.className = type === 'success' ? 'success-message' : 'error-message';
        messageDiv.textContent = text;
    }

    const container = document.querySelector('.trades-container');
    if (container) {
        container.insertBefore(messageDiv, container.firstChild);
    } else {
        // –Ø–∫—â–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –¥–æ–¥–∞—î–º–æ –¥–æ body
        document.body.insertBefore(messageDiv, document.body.firstChild);
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ (–æ–∫—Ä—ñ–º loading)
    if (type !== 'loading') {
        setTimeout(() => {
            if (messageDiv && messageDiv.parentNode) {
                messageDiv.remove();
            }
        }, 5000);
    }
}

async function loginToNextAccount(accounts, index = 0) {
    if (index >= accounts.length) {
        console.log('All accounts processed.');
        return;
    }

    const account = accounts[index];
    
    try {
        // –ß–∏—Ç–∞—î–º–æ .maFile —á–µ—Ä–µ–∑ IPC
        const maFileResult = await ipcRenderer.invoke('read-mafile', account.login);
        
        if (!maFileResult.success) {
            console.error(`–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è maFile –¥–ª—è ${account.login}:`, maFileResult.error);
            showMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è maFile –¥–ª—è ${account.login}: ${maFileResult.error}`, 'error');
            return;
        }
        
        const { sharedSecret, identitySecret } = maFileResult;

        console.log(`Logging in as ${account.login}...`);
        await tradeManager.login(account.login, account.password, SteamTotp.generateAuthCode(sharedSecret), identitySecret);
        console.log(`Logged in as ${account.login}.`);
        
        // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –í–°–Ü –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –≤—Ö–æ–¥—É
        hideLoadingMessages();
        
        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥
        showMessage(`‚úÖ –£—Å–ø—ñ—à–Ω–æ —É–≤—ñ–π—à–ª–∏ —è–∫ ${account.name || account.login}`, 'success');
        
        loadTrades();
    } catch (e) {
        console.error(`Failed to log in as ${account.login}:`, e);
        
        // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
        hideLoadingMessages();
        
        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        showMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É: ${e.message}`, 'error');
        
        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ª–æ–≥—ñ–Ω—É –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
        document.getElementById('login-container').style.display = 'block';
        document.getElementById('account-info').style.display = 'none';
    }
    // –í–ò–î–ê–õ–ï–ù–û –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É
    // setTimeout(() => loginToNextAccount(accounts, index + 1), 5000); 
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∞–∫–∞—É–Ω—Ç–∏ —ñ –Ω–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –∞–ª–µ –ù–ï –ª–æ–≥—ñ–Ω–∏–º–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
window.onload = async () => {
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∞–∫–∞—É–Ω—Ç—ñ–≤ —É —Å–µ–ª–µ–∫—Ç
    const accountSelect = document.getElementById('account-select');
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    accountSelect.className = 'with-icon loading';
    accountSelect.innerHTML = '<option value="">‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—ñ–≤...</option>';
    
    try {
        const data = await ipcRenderer.invoke('get-accounts-data');
        const accounts = data.accounts;
        
        // –û—á–∏—â—É—î–º–æ —Å–µ–ª–µ–∫—Ç
        accountSelect.innerHTML = '';
        
        if (accounts && accounts.length > 0) {
            // –î–æ–¥–∞—î–º–æ –æ–ø—Ü—ñ—é "–û–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç"
            const defaultOption = document.createElement('option');
            defaultOption.value = '';
            defaultOption.textContent = 'üéØ –û–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç –¥–ª—è –ª–æ–≥—ñ–Ω—É';
            accountSelect.appendChild(defaultOption);
            
            // –î–æ–¥–∞—î–º–æ –≤—Å—ñ –∞–∫–∞—É–Ω—Ç–∏ –∑ –∫—Ä–∞—Å–∏–≤–∏–º–∏ –µ–º–æ–¥–∑—ñ
            accounts.forEach((account, index) => {
                const option = document.createElement('option');
                option.value = account.login;
                
                // –î–æ–¥–∞—î–º–æ –µ–º–æ–¥–∑—ñ —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É—î–º–æ —Ç–µ–∫—Å—Ç
                const accountNumber = `#${index + 1}`;
                const accountName = account.name || account.login;
                const primeStatus = account.prime ? 'üëë' : '‚ö°';
                const farmingStatus = account.farming ? 'üå±' : 'üí§';
                
                option.textContent = `${primeStatus} ${farmingStatus} ${accountNumber} ${accountName}`;
                option.title = `Login: ${account.login} | Prime: ${account.prime ? '–¢–∞–∫' : '–ù—ñ'} | Farming: ${account.farming ? '–¢–∞–∫' : '–ù—ñ'}`;
                
                accountSelect.appendChild(option);
            });
            
            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≥–æ—Ç–æ–≤–∏–π —Å—Ç–∞–Ω
            accountSelect.className = 'with-icon ready';
            console.log(`–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${accounts.length} –∞–∫–∞—É–Ω—Ç—ñ–≤ —É —Å–µ–ª–µ–∫—Ç`);
        } else {
            // –ù–µ–º–∞—î –∞–∫–∞—É–Ω—Ç—ñ–≤
            accountSelect.innerHTML = '<option value="">‚ùå –ê–∫–∞—É–Ω—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</option>';
            accountSelect.className = 'with-icon empty';
        }
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∞–∫–∞—É–Ω—Ç—ñ–≤:', error);
        accountSelect.innerHTML = '<option value="">üö´ –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</option>';
        accountSelect.className = 'with-icon error';
    }
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é
    loadAndRenderHistory();
    
    // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ–π –¥–ª—è –Ω–æ–≤–∏—Ö –æ—Ñ–µ—Ä—ñ–≤
    tradeManager.on('newOffer', offer => {
        console.log('New offer');
        loadTrades();
    });
};

async function updateLastDropInfo(accountLogin) {
    try {
        const data = await ipcRenderer.invoke('get-accounts-data');
        const accounts = data.accounts;
        const inventory = JSON.parse(fs.readFileSync(path.join(__dirname, 'inventories', `${accountLogin}_730.json`)));

        inventory.sort((a, b) => new Date(b.acquired_date) - new Date(a.acquired_date));
        const lastDrop = inventory[0];
        const imageUrl = lastDrop.getImageURL ? lastDrop.getImageURL() : `https://community.cloudflare.steamstatic.com/economy/image/${lastDrop.icon_url}`;

        tradeManager.getItemPrice(730, lastDrop.market_hash_name)
            .then(price => {
                const accountIndex = accounts.findIndex(acc => acc.login === accountLogin);
                if (accountIndex !== -1) {
                    accounts[accountIndex].lastDrop = lastDrop.market_hash_name;
                    accounts[accountIndex].lastDropPrice = price.lowest_price;
                    accounts[accountIndex].lastDropImageUrl = imageUrl;
                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —á–µ—Ä–µ–∑ IPC (–ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫)
                    ipcRenderer.invoke('save-accounts-data', { accounts });
                    render();
                }
            })
            .catch(err => {
                console.error('Failed to get item price:', err);
            });
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –¥—Ä–æ–ø:', error);
    }
}